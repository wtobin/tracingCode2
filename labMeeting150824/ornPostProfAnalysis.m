
%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
% 
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing 
% ORNs_Left(find(ORNs_Left == 593865))=[];

%return all skeleton IDs of DM6 PNs
PNs=annotations.PN;

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);


% Loop over L ORNs
for o=1:length(ORNs_Left)
    
   
    ipsiPNs=0;
    contraPNs=0;
    numPost=0;
    
    %loop over all connectors
    for i= 1 : length(connFields)
        
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Left(o)
                 numPost=numPost+length(conns.(cell2mat(connFields(i))).post);
           
                
                for j=1:length(conns.(cell2mat(connFields(i))).post)
                   
                    
                    if ismember(conns.(cell2mat(connFields(i))).post(j), PNs([1,2,5]))== 1
                        ipsiPNs=ipsiPNs+1;
                        
                    elseif ismember(conns.(cell2mat(connFields(i))).post(j), PNs([3,4])) ==1
                        contraPNs=contraPNs+1;
                        
                    end
                end
            else
                
            end
        end
        
    end
    
    totPostProfL(o)=numPost;
    ipsiPNPostProfL(o)=ipsiPNs;
    contraPNPostProfL(o)=contraPNs;
    
    
end


% Loop over R ORNs
for o=1:length(ORNs_Right)
    
   
    ipsiPNs=0;
    contraPNs=0;
    numPost=0;
    
    %loop over all connectors
    for i= 1 : length(connFields)
        
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Right(o)
                 numPost=numPost+length(conns.(cell2mat(connFields(i))).post);
           
                
                for j=1:length(conns.(cell2mat(connFields(i))).post)
                   
                    
                    if ismember(conns.(cell2mat(connFields(i))).post(j), PNs([3,4]))== 1
                        ipsiPNs=ipsiPNs+1;
                        
                    elseif ismember(conns.(cell2mat(connFields(i))).post(j), PNs([1,2,5])) ==1
                        contraPNs=contraPNs+1;
                        
                    end
                end
            else
                
            end
        end
        
    end
    
    totPostProfR(o)=numPost;
    ipsiPNPostProfR(o)=ipsiPNs;
    contraPNPostProfR(o)=contraPNs;
    
    
end


figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(ipsiPNPostProfL./totPostProfL, 20)
xlabel('ipsi PN post/total post')
ylabel('Freq')
title('Left ORNs')
xlim([0 .5])
meanFractIpsiL=['Mean: ', num2str(mean(ipsiPNPostProfL./totPostProfL))];
stdFractIpsiL=['std: ', num2str(std(ipsiPNPostProfL./totPostProfL))];
cvFractIpsiL=['CV: ', num2str(std(ipsiPNPostProfL./totPostProfL)/mean(ipsiPNPostProfL./totPostProfL))];
text(.3,3.5,meanFractIpsiL)
text(.3,3.25,stdFractIpsiL)
text(.3,3,cvFractIpsiL)


subplot(2,2,2)
hist(ipsiPNPostProfR./totPostProfR, 20)
xlabel('ipsi PN post/total post')
ylabel('Freq')
title('Right ORNs')
xlim([0 .5])
meanFractIpsiR=['Mean: ', num2str(mean(ipsiPNPostProfR./totPostProfR))];
stdFractIpsiR=['std: ', num2str(std(ipsiPNPostProfR./totPostProfR))];
cvFractIpsiR=['CV: ', num2str(std(ipsiPNPostProfR./totPostProfR)/mean(ipsiPNPostProfR./totPostProfR))];
text(.3,3.5,meanFractIpsiR)
text(.3,3.25,stdFractIpsiR)
text(.3,3,cvFractIpsiR)

subplot(2,2,3)
hist(contraPNPostProfL./totPostProfL, 20)
xlabel('contra PN post/total post')
ylabel('Freq')
xlim([0 .5])
meanFractContraL=['Mean: ', num2str(mean(contraPNPostProfL./totPostProfL))];
stdFractContraL=['std: ', num2str(std(contraPNPostProfL./totPostProfL))];
cvFractContraL=['CV: ', num2str(std(contraPNPostProfL./totPostProfL)/mean(contraPNPostProfL./totPostProfL))];
text(.3,3.5,meanFractContraL)
text(.3,3.25,stdFractContraL)
text(.3,3,cvFractContraL)


subplot(2,2,4)
hist(contraPNPostProfR./totPostProfR, 20)
xlabel('contra PN post/total post')
ylabel('Freq')
xlim([0 .5])
meanFractContraR=['Mean: ', num2str(mean(contraPNPostProfR./totPostProfR))];
stdFractContraR=['std: ', num2str(std(contraPNPostProfR./totPostProfR))];
cvFractContraR=['CV: ', num2str(std(contraPNPostProfR./totPostProfR)/mean(contraPNPostProfR./totPostProfR))];
text(.3,3.5,meanFractContraR)
text(.3,3.25,stdFractContraR)
text(.3,3,cvFractContraR)


% Look at histogram of totPostProf


figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(totPostProfL, 20)
xlabel('Num Postsynaptic Targets')
ylabel('Freq')
title('Left ORNs')
xlim([100 400])
 ylim([0 6])
meanOutL=['Mean: ', num2str(mean(totPostProfL))];
stdOutL=['std: ', num2str(std(totPostProfL))];
cvOutL=['CV: ', num2str(std(totPostProfL)/mean(totPostProfL))];
text(150,5.5,meanOutL)
text(150,5.25,stdOutL)
text(150,5,cvOutL)


subplot(1,2,2)
hist(totPostProfR, 20)
xlabel('Num Postsynaptic Targets')
ylabel('Freq')
title('Right ORNs')
xlim([100 400])
ylim([0 6])
meanOutR=['Mean: ', num2str(mean(totPostProfR))];
stdOutR=['std: ', num2str(std(totPostProfR))];
cvOutR=['CV: ', num2str(std(totPostProfR)/mean(totPostProfR))];
text(150,5.5,meanOutR)
text(150,5.25,stdOutR)
text(150,5,cvOutR)


