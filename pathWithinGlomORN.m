%The goal of this code is to calculate the path length of an axon
%collateral within an individual glomerulus. Additionally I would also like
%to find the number of presynaptic sites within the glomerulus

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
% 
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing 
% ORNs_Left(find(ORNs_Left == 593865))=[];

ORNs=[ORNs_Left, ORNs_Right];


%for each ORN

for o=1:length(ORNs)
tic
% Step #1 load ORN skeletons

workingSkel=loadjson(['~/tracing/skeletons/',num2str(ORNs(o)),'.json']);


% STEP 2: generate the directed, weighted adjacency matrix and graph obj
%also return the list of skeleton vertex names that went into this
%adjacency matrix


[adjMat, skelVertNames]=getSkelAdjMat_DW_ORN(workingSkel);


%matrix is transposed to reflect my view of parent/child relationships,
%this is troublesome because I dont think it should be the
%case******!!!!!!!! TALK W? WEI ABOUT THIS

adjMat=adjMat';

%make a biograph object out of it
G=biograph(adjMat);


% This loop runs over the the verts that will go into the Adj Mat and looks for
% the start of the left axon/s

axonCounterL=1;
leftStart=[];

for v =1:length(skelVertNames)
    
    if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
    else
        
    if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'left axon') == 1
        
        leftStart(axonCounterL)=v;
        
        %leftStartNodeName=skelVertNames(v)
        axonCounterL=axonCounterL+1;
        
    else
    end
    end
end


for s = 1:length(leftStart)
% step 4 identify all nodes that are descendants of the left axon start 


%Traverse the graph from the left axon start vertex, as long as this node has
%all the glomerular collateral as descendants and no connection back to its
%parent this should yield the indicies of all nodes (from skelVertNames)
%involved in the collateral

leftAxonInds=G.traverse(leftStart(s));


% Step 5 We want to calculate the total path length of this subgraph

%NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different

%For now I guess I am going to do this by pulling values from my adjacency
%matrix, there is probably a smarter/more elegant way to do this

%For each node in this sub-arbor
runningLength=[];


for i=1:length(leftAxonInds)
    
    %We are going to ask whether it is connected to all other nodes in the
    %sub-arbor
    
    others=leftAxonInds;
    others(i)=[];
    
    for j=others;
        
        
        if adjMat(leftAxonInds(i),j) ~= 0
            
            runningLength=[runningLength, adjMat(leftAxonInds(i),j)];
            
        else
        end
    end
end
        
totalLength(s)=sum(runningLength);

% Step 6 find all presynaptic sites in this subarbor
preSiteCounter=0;

for v=leftAxonInds
    
    children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
    
    for c=1:length(children)
        
        if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
            
           preSiteCounter=preSiteCounter+1;
           
        else
        end
    end
end

preSiteNum(s)=preSiteCounter;


end

leftAxons{o}(1,:)=totalLength;
leftAxons{o}(2,:)=preSiteNum;

totalLength=[];
preSiteNum=[];

% This loop runs over the the verts that will go into the Adj Mat and looks for
% the start of the right axons

axonCounterR=1;
rightStart=[];

for v =1:length(skelVertNames)
    
    if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
    else
        
    if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'right axon') == 1
        
        rightStart(axonCounterR)=v;
        %leftStartNodeName=skelVertNames(v)
        axonCounterR=axonCounterR+1;
        
    else
    end
    end
end


for s = 1:length(rightStart)
% step 4 identify all nodes that are descendants of the right axon starts 


%Traverse the graph from the left axon start vertex, as long as this node has
%all the glomerular collateral as descendants and no connection back to its
%parent this should yield the indicies of all nodes (from skelVertNames)
%involved in the collateral

rightAxonInds=G.traverse(rightStart(s));


% Step 5 We want to calculate the total path length of this subgraph

%NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different

%For now I guess I am going to do this by pulling values from my adjacency
%matrix, there is probably a smarter/more elegant way to do this

%For each node in this sub-arbor
runningLength=[];

for i=1:length(rightAxonInds)
    
    %We are going to ask whether it is connected to all other nodes in the
    %sub-arbor
    
    others=rightAxonInds;
    others(i)=[];
    
    for j=others;
        
        
        if adjMat(rightAxonInds(i),j) ~= 0
            
            runningLength=[runningLength, adjMat(rightAxonInds(i),j)];
            
        else
        end
    end
end
        
totalLength(s)=sum(runningLength);

% Step 6 find all presynaptic sites in this subarbor

preSiteCounter=0;

for v=rightAxonInds
    
    children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
    
    for c=1:length(children)
        
        if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
            
           preSiteCounter=preSiteCounter+1;
           
        else
        end
    end
end

preSiteNum(s)=preSiteCounter;


end

rightAxons{o}(1,:)=totalLength;
rightAxons{o}(2,:)=preSiteNum;
   
totalLength=[];
preSiteNum=[];
toc
end


cd('./tracingCode2/wfly1_Manuscript/')
save('leftAxons', 'leftAxons')
save('rightAxons', 'rightAxons')


%% Scatter ipsi glomerular path length V mean Fractional contribution to ORN-->PN synapse pool

% For each ORN calculate its total ipsi within glomerulus length 

for o=1:length(ORNs)
    runL=[]
    runPS=[]
    
    if o<=25
        
        for j=1:size(leftAxons{o},2)
            runL=[runL, leftAxons{o}(1,j)]
            runPS=[runPS,leftAxons{o}(2,j)]
            
        end
        
        cLengths(o)=sum(runL)
        psSites(o)=sum(runPS)
        
    else
        
        
        for j=1:size(rightAxons{o},2)
            runL=[runL, rightAxons{o}(1,j)]
            runPS=[runPS,rightAxons{o}(2,j)]
        end
        
        cLengths(o)=sum(runL)
        psSites(o)=sum(runPS)
    end
end
            
            
            

%% Cable length V Fractional PN input

% Plotting
figure()
set(gcf, 'Color', 'w')

scatter(cLengths(1:25),  mean(contactNum_Fract(1:25,[1:3])'), 'filled')
hold on
scatter(cLengths(26:end),  mean(contactNum_Fract(26:end,[4:5])'), 'r', 'filled')
% xlim([0 .07])
% ylim([0 0.07])

xlabel('Ipsi Intra-glomerular Cable Length (nm)', 'FontSize', 16)
ylabel('Mean Fractional Input to Ipsi PNs', 'FontSize',16)
ax=gca;
ax.FontSize=16;

title('Cable Length V Fractional PN Input','FontSize', 18)
legend({'Left ORNs','Right ORNs'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics

[pRho, pP]=corr(cLengths', [mean(contactNum_Fract(1:25,[1:3])'),mean(contactNum_Fract(26:end,[4:5])') ]')

text(1*10^5,.01,{['Pearson''s R val: ', num2str(pRho)]; ['Pearson''s P val: ', num2str(pP)]}, 'FontSize', 16)

%% tbar density (#tbar/nodes) V. total tbar number

% Plotting
figure()
set(gcf, 'Color', 'w')

scatter(psSites(1:25)./cLengths(1:25),  mean(contactNum_Fract(1:25,[1:3])'), 'filled')
hold on
scatter(psSites(26:end)./ cLengths(26:end),  mean(contactNum_Fract(26:end,[4:5])'), 'r', 'filled')
% xlim([0 .07])
% ylim([0 0.07])

xlabel('Tbar Density (tbars/nm)', 'FontSize', 16)
ylabel('Mean Fractional Input to Ipsi PNs', 'FontSize',16)
ax=gca;
ax.FontSize=16;

title('T bar Density V Fractional PN Input','FontSize', 18)
legend({'Left ORNs','Right ORNs'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics
allTbarDens=[psSites(1:25)./cLengths(1:25),psSites(26:end)./ cLengths(26:end)]';
allContNumF=[[mean(contactNum_Fract(1:25,[1:3])'),mean(contactNum_Fract(26:end,[4:5])') ]'];

allTbarDens(40)=[];
allContNumF(40)=[];

[pRho, pP]=corr(allTbarDens, allContNumF,'type','Spearman' )

text(4*10^-4,.01,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]}, 'FontSize', 16)

%% tbar density (#tbar/nodes) V. intra-glomerular cable length

% Plotting
figure()
set(gcf, 'Color', 'w')

scatter(psSites(1:25)./cLengths(1:25),  cLengths(1:25), 'filled')
hold on
scatter(psSites(26:end)./ cLengths(26:end),  cLengths(26:end), 'r', 'filled')
% xlim([0 .07])
% ylim([0 0.07])

xlabel('Tbar Density (tbars/nm)', 'FontSize', 16)
ylabel('Ipsi Intra-glomerular cable length', 'FontSize',16)
ax=gca;
ax.FontSize=16;

title('T bar Density V Glomerular cable length','FontSize', 18)
legend({'Left ORNs','Right ORNs'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics
allTbarDens=[psSites(1:25)./cLengths(1:25),psSites(26:end)./ cLengths(26:end)]';


allTbarDens(40)=[];
cLengths_mod=cLengths;
cLengths_mod(40)=[];

[pRho, pP]=corr(allTbarDens, cLengths_mod')

text(3.75*10^-4,.65*10^5,{['Pearson''s R val: ', num2str(pRho)]; ['Pearson''s P val: ', num2str(pP)]}, 'FontSize', 16)

%% intra-glomerular tbar num V Fractional ipsi PN input

% Plotting
figure()
set(gcf, 'Color', 'w')

scatter(psSites(1:25),  mean(contactNum_Fract(1:25,[1:3])'), 'filled')
hold on
scatter(psSites(26:end),  mean(contactNum_Fract(26:end,[4:5])'), 'r', 'filled')
% xlim([0 .07])
% ylim([0 0.07])

xlabel('Ipsi Intra-glomerular Cable Length (nm)', 'FontSize', 16)
ylabel('Mean Fractional Input to Ipsi PNs', 'FontSize',16)
ax=gca;
ax.FontSize=16;

title('Cable Length V Fractional PN Input','FontSize', 18)
legend({'Left ORNs','Right ORNs'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics

[pRho, pP]=corr(cLengths', [mean(contactNum_Fract(1:25,[1:3])'),mean(contactNum_Fract(26:end,[4:5])') ]')

text(1*10^5,.01,{['Pearson''s R val: ', num2str(pRho)]; ['Pearson''s P val: ', num2str(pP)]}, 'FontSize', 16)

