%The goal of this code is to generate a figure showing the total number of
%profiles postsynaptic to right and left ORN axons

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

%% Conn num collection

load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplementals/misc/ornPostsynOrphans/rightPostSkels.mat')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplementals/misc/ornPostsynOrphans/leftPostSkels.mat')


% Loop over each ORN

counter=1;
for p=1:length(ORNs)
    
    if isempty(leftPostSkels{p})
        
    else
        
      numPostProfL(counter)=numel(leftPostSkels{p});
      counter=counter+1;
      
    end
end

counter=1;
for p=1:length(ORNs)
    
    if isempty(rightPostSkels{p})
        
    else
      numPostProfR(counter)=numel(rightPostSkels{p});
      counter=counter+1;
    end
end


%% Plotting

figure()
set(gcf, 'Color', 'w')

%Check this result, boxplot changed and I am not sure why

h=boxplot([numPostProfL(1:27), numPostProfR(27:end),...
  numPostProfL(28:end), numPostProfR(1:26) ]', [ones(53,1); 2*ones(51,1)], 'Color', 'k', 'notch','on');

h.LineWidth = 2;
ax=gca;
ax.XTickLabel={'Ipsi Axons','Contra Axons'};
ylabel('Total # Prostsynaptic Profiles', 'Fontsize',16)
ylim([0 300])
ax.YTick=[0:100:300];
ax.FontSize=16;
axis square

saveas(gcf,'ipsiContraTotPostProf')
saveas(gcf,'ipsiContraTotPostProf','epsc')


%% Permutation test
nPerm = 100000;

% total post profiles p < 0.002, 100000 perms
sa = [numPostProfL(1:27), numPostProfR(27:end)]';
sb = [numPostProfL(28:end), numPostProfR(1:26)]';

sh0 = [sa; sb];

m = length(sa); 
n = length(sb); 

d_empirical = mean(sa) - mean(sb);

sa_rand = zeros(m,nPerm);
sb_rand = zeros(n,nPerm);
tic
for ii = 1:nPerm
    sa_rand(:,ii) = randsample(sh0,m);%,true);
    sb_rand(:,ii) = randsample(sh0,n);%,true);
end
toc
% Now we compute the differences between the means of these resampled
% samples.
% d = median(sb_rand) - median(sa_rand);
d = mean(sa_rand) - mean(sb_rand);

%
figure;
% [nn,xx] = hist(d,100);
% bar(xx,nn/sum(nn))
histogram(d,'Normalization','probability')
ylabel('Probability of occurrence')
xlabel('Difference between means')
hold on
%

y = get(gca,'yLim'); % y(2) is the maximum value on the y-axis.
x = get(gca,'xLim'); % x(1) is the minimum value on the x-axis.
plot([d_empirical,d_empirical],y*.99,'r-','lineWidth',2)

% Probability of H0 being true = 
% (# randomly obtained values > observed value)/total number of simulations
p = sum(abs(d) > abs(d_empirical))/length(d);
text(x(1)+(.01*(abs(x(1))+abs(x(2)))),y(2)*.95,sprintf('H0 is true with %4.4f probability.',p))
