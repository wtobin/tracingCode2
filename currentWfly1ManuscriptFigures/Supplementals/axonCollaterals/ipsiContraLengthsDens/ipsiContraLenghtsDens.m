%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

%% Collect Path length

load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplementals/misc/ornOutputSynDensity/leftAxons')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplementals/misc/ornOutputSynDensity/rightAxons')

% For each ORN calculate its total within glomerulus axon lengths
leftCounter=1;
rightCounter=1;

for p=1:length(ORNs)
    
    leftRunL=[];
    leftRunPS=[];
    
    
    for j=1:size(leftAxons{p},2)
        
        leftRunL=[leftRunL, leftAxons{p}(1,j)];
        leftRunPS=[leftRunPS,leftAxons{p}(2,j)];
        
    end
    
    if isnan(leftRunPS)==1
        
    else
        
        leftLengths(leftCounter)=sum(leftRunL);
        leftPreSites(leftCounter)=sum(leftRunPS);
        leftCounter=leftCounter+1;
        
    end
    
    rightRunL=[];
    rightRunPS=[];
    
    
    for j=1:size(rightAxons{p},2)
        
        rightRunL=[rightRunL, rightAxons{p}(1,j)];
        rightRunPS=[rightRunPS,rightAxons{p}(2,j)];
        
    end
    
    if isnan(rightRunPS)==1
    else
        
        rightLengths(rightCounter)=sum(rightRunL);
        rightPreSites(rightCounter)=sum(rightRunPS);
        rightCounter=rightCounter+1;
    end
end



%% create array of length and Density for ipsi and Contra axons

ipsiLenDens(:,1)=[leftLengths(1:27),rightLengths(27:end)];
ipsiLenDens(:,2)=[leftPreSites(1:27)./leftLengths(1:27),rightPreSites(27:end)./rightLengths(27:end)];

contraLenDens(:,1)=[leftLengths(28:end),rightLengths(1:26)];
contraLenDens(:,2)=[leftPreSites(28:end)./leftLengths(28:end),rightPreSites(1:26)./rightLengths(1:26)];

%% Plotting
figure()

set(gcf,'Color','w')
h=boxplot([ipsiLenDens(:,1);contraLenDens(:,1)], [ones(53,1);2*ones(51,1)], 'color', 'k', 'notch', 'on');
h.LineWidth = 2;
ax=gca;
ax.XTickLabel={'ipsi axons','contra axons'};
ax.FontSize=16;
ylabel('cable length(nm)','FontSize',16);
axis square
ylim([0 2*10^5])
ax.YTick=[0:1*10^5:2*10^5]
saveas(gcf,'ipsiContraLength')
saveas(gcf,'ipsiContraLength','epsc')


figure()
set(gcf,'Color','w')
boxplot([ipsiLenDens(:,2);contraLenDens(:,2)], [ones(53,1);2*ones(51,1)],'color', 'k', 'notch', 'on')
h.LineWidth = 2;
ax=gca;
ax.XTickLabel={'ipsi axons','contra axons'};
ylabel('tbar density (tbars/nm)', 'FontSize',16);
axis square
ax.FontSize=16;
ylim([0 6*10^-4])


saveas(gcf,'ipsiContraDens')
saveas(gcf,'ipsiContraDens','epsc')

%% Permutation test
nPerm = 10000;

% % length p > 0.11
% sa = ipsiLenDens(:,1);
% sb = contraLenDens(:,1);

% density p < 0.0001, 10000 perms
sa = ipsiLenDens(:,2);
sb = contraLenDens(:,2);

sh0 = [sa; sb];

m = length(sa); 
n = length(sb); 

d_empirical = mean(sa) - mean(sb);

sa_rand = zeros(m,nPerm);
sb_rand = zeros(n,nPerm);
tic
for ii = 1:nPerm
    sa_rand(:,ii) = randsample(sh0,m);%,true);
    sb_rand(:,ii) = randsample(sh0,n);%,true);
end
toc
% Now we compute the differences between the means of these resampled
% samples.
% d = median(sb_rand) - median(sa_rand);
d = mean(sa_rand) - mean(sb_rand);

%
figure;
% [nn,xx] = hist(d,100);
% bar(xx,nn/sum(nn))
histogram(d,'Normalization','probability')
ylabel('Probability of occurrence')
xlabel('Difference between means')
hold on
%

y = get(gca,'yLim'); % y(2) is the maximum value on the y-axis.
x = get(gca,'xLim'); % x(1) is the minimum value on the x-axis.
plot([d_empirical,d_empirical],y*.99,'r-','lineWidth',2)

% Probability of H0 being true = 
% (# randomly obtained values > observed value)/total number of simulations
p = sum(abs(d) > abs(d_empirical))/length(d);
text(x(1)+(.01*(abs(x(1))+abs(x(2)))),y(2)*.95,sprintf('H0 is true with %4.4f probability.',p))