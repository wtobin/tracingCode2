%The goal of this code is to calculate the path length of a  PN dendrite
%within an individual glomerulus. Additionally I would also like
%to find the number of postsynaptic ORN input sites within the glomerulus

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=annotations.DM6_0x20_PN;


%% Calculate cable length of each ORNs dendrites in both hemispheres, record # of output synapses

%Load connectors
load('/home/simulation/tracing/conns.mat')

%for each ORN

for p=1:length(PNs)
    tic
    % Step #1 load ORN skeletons
    workingSkel=loadjson(['~/tracing/skeletons/',num2str(PNs(p)),'.json']);
    
    
    % STEP 2: generate the directed, weighted adjacency matrix and graph obj
    %also return the list of skeleton vertex names that went into this
    %adjacency matrix
    [adjMat, skelVertNames]=getSkelAdjMat_DW_ORN(workingSkel);
    
    
    %matrix is transposed to reflect my view of parent/child relationships,
    %this is troublesome because I dont think it should be the
    %case******!!!!!!!! TALK W? WEI ABOUT THIS
    adjMat=adjMat';
    
    %make a biograph object out of it
    G=biograph(adjMat);
    
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the left dendrite/s
    dendriteCounter=1;
    start=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'dendrite') == 1
                
                start(dendriteCounter)=v;
                
                %leftStartNodeName=skelVertNames(v)
                dendriteCounter=dendriteCounter+1;
                
            else
            end
        end
    end
    
    
    
    for s = 1:length(start)
        % step 4 identify all nodes that are descendants of the left dendrite start
        
        
        %Traverse the graph from the left dendrite start vertex, as long as this node has
        %all the glomerular collateral as descendants and no connection back to its
        %parent this should yield the indicies of all nodes (from skelVertNames)
        %involved in the collateral
        dendInds=G.traverse(start(s));
        
        
        %In some cases the 'left dendrite' tag is on the wrong side of the root node so
        %the traverse above returns all nodes other than those from the left dendrite.
        % I am dealing with this by identifying all cases in which the "left dendrite"
        % consists of more than 2k nodes and simply taking the inverse set of
        % indicies in these cases
        
%         counter=1;
%         for j=dendInds
%             
%             
%             vertLocsL{p}(counter,1)=workingSkel.vertices.(cell2mat(skelVertNames(j))).x;
%             vertLocsL{p}(counter,2)=workingSkel.vertices.(cell2mat(skelVertNames(j))).y;
%             vertLocsL{p}(counter,3)=workingSkel.vertices.(cell2mat(skelVertNames(j))).z;
%             counter=counter+1;
%             
%         end
%         
%         
        
        % Step 5 We want to calculate the total path length of this subgraph
        
        %NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different
        
        %For now I guess I am going to do this by pulling values from my adjacency
        %matrix, there is probably a smarter/more elegant way to do this
        
        %For each node in this sub-arbor
        runningLength=[];
        
        
        for i=1:length(dendInds)
            
            %We are going to ask whether it is connected to all other nodes in the
            %sub-arbor
            
            others=dendInds;
            others(i)=[];
            
            for j=others;
                
                
                if adjMat(dendInds(i),j) ~= 0
                    
                    runningLength=[runningLength, adjMat(dendInds(i),j)];
                    
                else
                end
            end
        end
        
        totalLength(s)=sum(runningLength);
        
        % Step 6 find all sites postsynaptic to ORNs in the dendrite
        
        
        postSiteCounter=0;
        
        for v=dendInds
            
            children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
            
            for c=1:length(children)
                
                if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'presynaptic_to') == 1
                  
                    if isempty(conns.(cell2mat(children(c))).pre)==1
                    
                    else
                    if ismember(conns.(cell2mat(children(c))).pre, ORNs)==1
                        postSiteCounter=postSiteCounter+1;
                    else
                    end
                    end
                    
                else
                end
            end
        end
        
        postSiteNum(s)=postSiteCounter;
        
        
    end
    
    dendrites{p}(1,:)=totalLength;
    dendrites{p}(2,:)=postSiteNum;
    toc
end




save('dendrites', 'dendrites')



%% Path Length

load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplementals/pnInputSynDensity/dendrites')




% For each pn, store path length, syn Num and density in an array

for p=1:length(PNs)
    
    dendParams(p,1)=sum(dendrites{p}(1,:))/1000; %cable length in um
    
    dendParams(p,2)=sum(dendrites{p}(2,:)); %ORN input syn Num
    
    dendParams(p,3)=dendParams(p,2)/dendParams(p,1); %ORN input syn Density
    
end


%% Display

figure()
set(gcf,'Color', 'w')

scatter([1,1,1],dendParams(1:3,3),'filled','k')
hold on
scatter([2,2],dendParams(4:5,3), 'filled','k')

ylim([0 7*10^-4])
xlim([0 3])
ax=gca;
ax.XTick=[1:1:2]
ax.XTickLabel={'Left PNs','Right PNs'}
ylabel('ORN input syn density (sites/nm)')

saveas(gcf,'pnInputSynDensity')



