%The goal of this script is to generate a scatterplot of each ORNs mean
%fractional input to L PNs plotted against its mean fractional input to R
%PNs

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
% PNs=annotations.PN;
PNs=sort(annotations.DM6_0x20_PN);
% PNs=annotations.DM6_0x20_PN;

% return all skel IDs with *LN* in fieldname
Fn = fieldnames(annotations);
selFn = Fn(~cellfun(@isempty,regexp(Fn,'LN')));

LNs=[];
for i = 1:numel(selFn)
    LNs=[LNs, annotations.(selFn{i})];
end

LNs = unique(LNs);

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);


%% Calculate fractional input values and sort the matricies


%Load ornToPn contact Num matrix
load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/ornToPn.mat');
    

% Now divide each element by the sum of the column it is in

for c=1:5
    
    contactNum_Fract(:,c)=ornsToPn(:,c)./sum(ornsToPn(:,c));
    
end


%% Plotting


figure()
set(gcf, 'Color', 'w')

scatter(mean(contactNum_Fract(1:27,[1,2,5]),2),mean(contactNum_Fract(1:27,[3,4]),2), 'filled')
hold on
scatter(mean(contactNum_Fract(28:end,[1,2,5]),2),mean(contactNum_Fract(28:end,[3,4]),2),'r', 'filled')

legend({'Left ORNs','Right ORNs'})

ax=gca;
ax.XLim=[0 .04];
ax.YLim=[0 .04];
xlabel('Mean Fractional Input to Left PNs');
ylabel('Mean Fractional Input to Right PNs');
saveas(gcf,'fractionalInputScatter','epsc')
saveas(gcf,'fractionalInputScatter')
