%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);


% return all skel IDs with *LN* in fieldname
Fn = fieldnames(annotations);
selFn = Fn(~cellfun(@isempty,regexp(Fn,'LN')));

LNs=[];
for i = 1:numel(selFn)
    LNs=[LNs, annotations.(selFn{i})];
end

LNs = unique(LNs);

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);



%% Calculate cable length of each ORNs axons in both hemispheres, record # of output synapses


%for each ORN
for p=1:length(ORNs)
    p
    tic
    % Step #1 load ORN skeletons
    workingSkel=loadjson(['~/tracing/skeletons/',num2str(ORNs(p)),'.json']);
    
    
    % STEP 2: generate the directed, weighted adjacency matrix and graph obj
    %also return the list of skeleton vertex names that went into this
    %adjacency matrix
    [adjMat, skelVertNames]=getSkelAdjMat_DW_ORN(workingSkel);
    
    
    %matrix is transposed to reflect my view of parent/child relationships,
    %this is troublesome because I dont think it should be the
    %case******!!!!!!!! TALK W? WEI ABOUT THIS
    adjMat=adjMat';
    
    %make a biograph object out of it
    G=biograph(adjMat);
    
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the left axon/s
    axonCounter=1;
    start=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'left axon') == 1
                
                start(axonCounter)=v;
                
                %leftStartNodeName=skelVertNames(v)
                axonCounter=axonCounter+1;
                
            else
            end
        end
    end
    
     % left axon node was improperly placed on ORN 15, use node
    % 693320 instead.
    
    if p == 34
        
        start=find(strcmp('x0x36_93320', skelVertNames));
    else
    end
    
    %check to see if there is a left axon, for our one unilateral R ORN there
    %will not be
    if isempty(start)
        
  
    else
        for s = 1:length(start)
            % step 4 identify all nodes that are descendants of the left axon start
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            leftAxonInds=G.traverse(start(s));
            
            %In this strange case the left axon is returned as the commisure segment.
            %Since it is a right ORN I will take the left axon to be anything left of
            %the midline that is left over when we remove the commisure vertices from
            %our list
            
            if p == 33
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
                counter=1;
                for k=1:numel(leftAxonInds)
                    
                    if workingSkel.vertices.(cell2mat(skelVertNames(leftAxonInds(k)))).x<4.4*10^5
                        
                        rightSideVerts(counter)=k;
                        counter=counter+1;
                        
                    else
                    end
                    
                    
                end
                
                leftAxonInds(rightSideVerts)=[];
                
            else
            end
            
            
            %In some cases the 'left axon' tag is on the wrong side of the root node so
            %the traverse above returns all nodes other than those from the left axon.
            % I am dealing with this by identifying all cases in which the "left axon"
            % consists of more than 2k nodes and simply taking the inverse set of
            % indicies in these cases
            
            if numel(leftAxonInds)>2000
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
            else
                
            end
            
            
          
            
            
            % Step 5 We want to calculate the total path length of this subgraph
            
            %NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different
            
            %For now I guess I am going to do this by pulling values from my adjacency
            %matrix, there is probably a smarter/more elegant way to do this
            
          
            % Step 6 find all postsynaptic profiles sites in this subarbor
            
            leftPostProfiles{p}=[];
            for v=leftAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                       
                        leftPostProfiles{p}=[leftPostProfiles{p}, conns.(cell2mat(children(c))).post];
                        
                    else
                    end
                end
            end
            
           
            
            
        end
        
    end
    

  
  
  
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the right axons
    
    axonCounterR=1;
    rightStart=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'right axon') == 1
                
                rightStart(axonCounterR)=v;
                %leftStartNodeName=skelVertNames(v)
                axonCounterR=axonCounterR+1;
                
            else
            end
        end
    end
    
    %check to see if there is a right axon, for our one unilateral L ORN there
    %will not be
    if isempty(rightStart)
        
      
        
    else
        
        for s = 1:length(rightStart)
            % step 4 identify all nodes that are descendants of the right axon starts
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            
            if p==43
                
                rightAxonInds=unique([G.traverse(rightStart),G.traverse(2346)]);
            else
                
                
                rightAxonInds=G.traverse(rightStart(s));
            end
            
           
            
            % Step 6 find all presynaptic sites in this subarbor
            
    rightPostProfiles{p}=[];
            
            for v=rightAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                        
                        rightPostProfiles{p}=[rightPostProfiles{p}, conns.(cell2mat(children(c))).post];
                        
                    else
                    end
                end
            end
            
            
            
            
        end
    end
    
  
   
    
   
  
    toc
end


save('rightPostSkels','rightPostSkels')
save('leftPostProfiles','leftPostProfiles')

%% Categorize presynaptic profiles

% Question, how many profiles can be accounted for as ORNs, PNs and LNs?


% Loop over each ORN
for p=1:length(ORNs)
    
    
    %loop over each presynaptic profile
    for s=1:length(leftPostProfiles{p})
        
        if ismember(leftPostProfiles{p}(s), ORNs) == 1
            
            leftPostProfiles{p}(s)=1;
            
            
        elseif ismember(leftPostProfiles{p}(s), PNs) == 1
            
            leftPostProfiles{p}(s)=2;
            
            
        elseif ismember(leftPostProfiles{p}(s), LNs) == 1
            
            leftPostProfiles{p}(s)=3;
            
            
        else %orphans
            leftPostProfiles{p}(s)=4;
            
        end
        
    end
end


% Loop over each ORN
for p=1:length(ORNs)
    
    
    %loop over each presynaptic profile
    for s=1:length(rightPostProfiles{p})
        
        if ismember(rightPostProfiles{p}(s), ORNs) == 1
            
            rightPostProfiles{p}(s)=1;
            
            
        elseif ismember(rightPostProfiles{p}(s), PNs) == 1
            
            rightPostProfiles{p}(s)=2;
            
            
        elseif ismember(rightPostProfiles{p}(s), LNs) == 1
            
            rightPostProfiles{p}(s)=3;
            
            
        else %orphans
            rightPostProfiles{p}(s)=4;
            
        end
        
    end
end


%For each ORN
for p=1:length(ORNs)
    
    %for each category
    for id=1:4
        
        idenCountsL(p,id)=sum(leftPostProfiles{p}==id);
        idenCountsR(p,id)=sum(rightPostProfiles{p}==id);
        
    end
    
    fractIdenCountsL(p,:)=idenCountsL(p,:)./sum(idenCountsL(p,:));
    fractIdenCountsR(p,:)=idenCountsR(p,:)./sum(idenCountsR(p,:));
end


%Load ornToPn contact Num matrix
load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/ornToPn.mat');
    

% Now divide each element by the sum of the column it is in
contactNum_Fract=zeros(53,5);

for c=1:5
    
    contactNum_Fract(1:27,c)=ornsToPn(1:27,c)./sum(ornsToPn(1:27,c));
    contactNum_Fract(28:end,c)=ornsToPn(28:end,c)./sum(ornsToPn(28:end,c));
    
end


for i= 1:length(ORNs)
    
    meanFractInputL(i)=mean(contactNum_Fract(i,[1,2,5]),2);
    meanFractInputR(i)=mean(contactNum_Fract(i,[3,4]),2);

    
end

%% Load the axon lengths

%Load the axon length and presynaptic site number data
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/leftAxons')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/rightAxons')


% For each ORN calculate its total within glomerulus axon lengths
leftCounter=1;
rightCounter=1;

for p=1:length(ORNs)
    
    leftRunL=[];
    leftRunPS=[];
    
    
    for j=1:size(leftAxons{p},2)
        
        leftRunL=[leftRunL, leftAxons{p}(1,j)];
        leftRunPS=[leftRunPS,leftAxons{p}(2,j)];
        
    end
    
    if isnan(leftRunPS)==1
        
    else
        
        leftLengths(leftCounter)=sum(leftRunL);
        leftPreSites(leftCounter)=sum(leftRunPS);
        leftCounter=leftCounter+1;
        
    end
    
    rightRunL=[];
    rightRunPS=[];
    
    
    for j=1:size(rightAxons{p},2)
        
        rightRunL=[rightRunL, rightAxons{p}(1,j)];
        rightRunPS=[rightRunPS,rightAxons{p}(2,j)];
        
    end
    
    if isnan(rightRunPS)==1
    else
        
        rightLengths(rightCounter)=sum(rightRunL);
        rightPreSites(rightCounter)=sum(rightRunPS);
        rightCounter=rightCounter+1;
    end
end




%% Figures


figure()
set(gcf,'Color','w')

scatter(idenCountsL(:,4),meanFractInputL)
hold on
scatter(idenCountsR(:,4),meanFractInputR, 'r')

xlabel('number of unIDd post profiles')
ylabel('mean fractional contribution to PNs')

legend('Left Axons', 'Right Axons')

 [r p]=corr([idenCountsL(find(idenCountsL(:,4)~=0),4); idenCountsR(find(idenCountsR(:,4)~=0),4)]...
    ,[meanFractInputL(find(meanFractInputL~=0))'; meanFractInputR(find(meanFractInputR~=0))'])


figure()
set(gcf,'Color','w')
scatter(idenCountsL(find(idenCountsL(:,4)~=0),4),leftLengths)
hold on
scatter(idenCountsR(find(idenCountsR(:,4)~=0),4),rightLengths, 'r')
xlabel('number of unIDd post profiles')
ylabel('mean fractional PN input')

 [r p]=corr([idenCountsL(find(idenCountsL(:,4)~=0),4); idenCountsR(find(idenCountsR(:,4)~=0),4)]...
    ,[leftLengths'; rightLengths'])


