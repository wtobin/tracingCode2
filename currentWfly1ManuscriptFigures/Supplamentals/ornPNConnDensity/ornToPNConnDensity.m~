%The goal of this code is to calculate the path lengths of ORN axons
%within individual glomeruli. Additionally I would also like
%to find the number of ORn output synapses

% NOTE: currently excluding ORN 28 right axon because the traverse function
% below is returning a truncated set of nodes and I cant debug it right now

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);


%% Calculate cable length of each ORNs axons in both hemispheres, record # of postsynaptic profiles in each glom, # of PN post profiles

%Load connectors
load('/home/simulation/tracing/conns.mat')


% for each ORN
for o=1:length(ORNs)
    
    % Step #1 load ORN skeletons
    workingSkel=loadjson(['~/tracing/skeletons/',num2str(ORNs(o)),'.json']);
    
    
    % STEP 2: generate the directed, weighted adjacency matrix and graph obj
    %also return the list of skeleton vertex names that went into this
    %adjacency matrix
    [adjMat, skelVertNames]=getSkelAdjMat_DW_ORN(workingSkel);
    
    
    %matrix is transposed to reflect my view of parent/child relationships,
    %this is troublesome because I dont think it should be the
    %case******!!!!!!!! TALK W? WEI ABOUT THIS
    adjMat=adjMat';
    
    %make a biograph object out of it
    G=biograph(adjMat);
    
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the left axon/s
    axonCounter=1;
    start=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'left axon') == 1
                
                start(axonCounter)=v;
                
                %leftStartNodeName=skelVertNames(v)
                axonCounter=axonCounter+1;
                
            else
            end
        end
    end
    
    
    % left axon node was improperly placed on ORN 15, use node
    % 693320 instead.
    
    if o == 34
        
        start=find(strcmp('x0x36_93320', skelVertNames));
    else
    end
    
    
    %check to see if there is a left axon, for our one unilateral R ORN there
    %will not be
    if isempty(start)
        
        numPostProf(s)=NaN;
        numPostPNs(s)=NaN;
        
    else
        
        for s = 1:length(start)
            % step 4 identify all nodes that are descendants of the left axon start
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            leftAxonInds=G.traverse(start(s));
            
            %In this strange case the left axon is returned as the commisure segment.
            %Since it is a right ORN I will take the left axon to be anything left of
            %the midline that is left over when we remove the commisure vertices from
            %our list
            
            if o == 33
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
                counter=1;
                for k=1:numel(leftAxonInds)
                    
                    if workingSkel.vertices.(cell2mat(skelVertNames(leftAxonInds(k)))).x<4.4*10^5
                        
                        rightSideVerts(counter)=k;
                        counter=counter+1;
                        
                    else
                    end
                    
                    
                end
                
                leftAxonInds(rightSideVerts)=[];
                
            else
            end
            
            
            
            
            %In some cases the 'left axon' tag is on the wrong side of the root node so
            %the traverse above returns all nodes other than those from the left axon.
            % I am dealing with this by identifying all cases in which the "left axon"
            % consists of more than 2k nodes and simply taking the inverse set of
            % indicies in these cases
            
            if numel(leftAxonInds)>2000
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
            else
                
            end
            
            
            % Count postsynaptic profiles and postsynaptic PN
            % profiles
            
            postProfCounts=[];
            postPNCounts=[];
            posCounter=1;
            
            for v=leftAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                        
                        %Record the number of post profiles at each
                        %connector and number of post pns
                        
                        postProfCounts=[postProfCounts, numel(conns.(cell2mat(children(c))).post)];
                        postPNCounts=[postPNCounts, sum(ismember(conns.(cell2mat(children(c))).post,PNs))];
                        
                        %Also record the position of the connector for the
                        %hell of it
                        
                        connPosL{o}(posCounter,1)=conns.(cell2mat(children(c))).location(1);
                        connPosL{o}(posCounter,2)=conns.(cell2mat(children(c))).location(2);
                        connPosL{o}(posCounter,3)=conns.(cell2mat(children(c))).location(3);
                        posCounter=posCounter+1;
                        
                    else
                    end
                end
            end
            
            numPostProf(s)=sum(postProfCounts);
            numPostPNs(s)=sum(postPNCounts);
            
            
            
        end
        
        
    end
    
    leftAxonConnNums{o}(1,:)=numPostProf;
    leftAxonConnNums{o}(2,:)=numPostPNs;
    
    numPostPNs=[];
    numPostProf=[];
    
    
    
    
    
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the right axons
    
    axonCounterR=1;
    rightStart=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'right axon') == 1
                
                rightStart(axonCounterR)=v;
                %leftStartNodeName=skelVertNames(v)
                axonCounterR=axonCounterR+1;
                
            else
            end
        end
    end
    
    
    %check to see if there is a right axon, for our one unilateral L ORN there
    %will not be
    if isempty(rightStart)
        
        numPostProf(s)=NaN;
        numPostPNs(s)=NaN;
        
    else
        
        for s = 1:length(rightStart)
            % step 4 identify all nodes that are descendants of the right axon starts
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            if o==43
                
                rightAxonInds=unique([G.traverse(rightStart),G.traverse(2346)]);
            else
                
                
                rightAxonInds=G.traverse(rightStart(s));
            end
            
            
            % Count postsynaptic profiles and postsynaptic PN
            % profiles
            
            postProfCounts=[];
            postPNCounts=[];
            posCounter=1;
            
            
            for v=rightAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                        
                        %Record the number of post profiles at each
                        %connector and number of post pns
                        
                        postProfCounts=[postProfCounts, numel(conns.(cell2mat(children(c))).post)];
                        postPNCounts=[postPNCounts, sum(ismember(conns.(cell2mat(children(c))).post,PNs))]
                        
                        %Also record the position of the connector for the
                        %hell of it
                        
                        connPosR{o}(posCounter,1)=conns.(cell2mat(children(c))).location(1);
                        connPosR{o}(posCounter,2)=conns.(cell2mat(children(c))).location(2);
                        connPosR{o}(posCounter,3)=conns.(cell2mat(children(c))).location(3);
                        posCounter=posCounter+1;
                        
                    else
                    end
                end
            end
            
            numPostProf(s)=sum(postProfCounts);
            numPostPNs(s)=sum(postPNCounts);
            
            
            
        end
        
    end
    
    rightAxonConnNums{o}(1,:)=numPostProf;
    rightAxonConnNums{o}(2,:)=numPostPNs;
    numPostPNs=[];
    numPostProf=[];
    
end



save('leftAxonConnNums', 'leftAxonConnNums')
save('rightAxonConnNums', 'rightAxonConnNums')


%% Collect conn nums into a single array

load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornPNConnDensity/leftAxonConnNums')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornPNConnDensity/rightAxonConnNums')



% For each ORN collect its total number of connections within each
% glomerulus as well as the total number of PN connections

leftCounter=1;
rightCounter=1;

for p=1:length(ORNs)
    
    leftRunT=[];
    leftRunP=[];
    
    
    for j=1:size(leftAxonConnNums{p},2)
        
        leftRunT=[leftRunT, leftAxonConnNums{p}(1,j)];
        leftRunP=[leftRunP,leftAxonConnNums{p}(2,j)];
        
    end
    
    if isnan(leftRunP)==1
        
    else
        
        leftTotCon(leftCounter)=sum(leftRunT);
        leftPNCon(leftCounter)=sum(leftRunP);
        leftCounter=leftCounter+1;
        
    end
    
    rightRunT=[];
    rightRunP=[];
    
    
    for j=1:size(rightAxonConnNums{p},2)
        
        rightRunT=[rightRunT, rightAxonConnNums{p}(1,j)];
        rightRunP=[rightRunP,rightAxonConnNums{p}(2,j)];
        
    end
    
    if isnan(rightRunP)==1
    else
        
        rightTotCon(rightCounter)=sum(rightRunT);
        rightPNCon(rightCounter)=sum(rightRunP);
        rightCounter=rightCounter+1;
    end
end


%% Load the axon lengths

%Load the axon length and presynaptic site number data
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/leftAxons')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/rightAxons')


% For each ORN calculate its total within glomerulus axon lengths
leftCounter=1;
rightCounter=1;

for p=1:length(ORNs)
    
    leftRunL=[];
    leftRunPS=[];
    
    
    for j=1:size(leftAxons{p},2)
        
        leftRunL=[leftRunL, leftAxons{p}(1,j)];
        leftRunPS=[leftRunPS,leftAxons{p}(2,j)];
        
    end
    
    if isnan(leftRunPS)==1
        
    else
        
        leftLengths(leftCounter)=sum(leftRunL);
        leftPreSites(leftCounter)=sum(leftRunPS);
        leftCounter=leftCounter+1;
        
    end
    
    rightRunL=[];
    rightRunPS=[];
    
    
    for j=1:size(rightAxons{p},2)
        
        rightRunL=[rightRunL, rightAxons{p}(1,j)];
        rightRunPS=[rightRunPS,rightAxons{p}(2,j)];
        
    end
    
    if isnan(rightRunPS)==1
    else
        
        rightLengths(rightCounter)=sum(rightRunL);
        rightPreSites(rightCounter)=sum(rightRunPS);
        rightCounter=rightCounter+1;
    end
end



%% Plotting

%Ipsi axons form more synapses in the glomerulus than contra and form more
%connections with PNs

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([[leftPreSites(1:27),rightPreSites(27:end)]';[leftPreSites(28:end),rightPreSites(1:26)]'], [ones(53,1); 2*ones(51,1)])
meanTbarDiff=(mean([leftPreSites(1:27),rightPreSites(27:end)]')/mean([leftPreSites(28:end),rightPreSites(1:26)]')-1)*100;
text(1,100,[num2str(meanTbarDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('Tbar Counts')
ylim([0 110])

subplot(1,2,2)
boxplot([[leftPNCon(1:27),rightPNCon(27:end)]';[leftPNCon(28:end),rightPNCon(1:26)]'], [ones(53,1); 2*ones(51,1)])
meanPNConDiff=(mean([leftPNCon(1:27),rightPNCon(27:end)]')/mean([leftPNCon(28:end),rightPNCon(1:26)]')-1)*100;
text(1,100,[num2str(meanPNConDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('PN Connections')
ylim([0 110])



% Diff in divergence and fraction of conns to PNs

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([ [leftTotCon(1:27)./leftPreSites(1:27),rightTotCon(27:end)./rightPreSites(27:end),...
   leftTotCon(28:end)./leftPreSites(28:end),rightTotCon(1:26)./rightPreSites(1:26) ]'], [ones(53,1); 2*ones(51,1)])

meanDivDiff=(mean([leftTotCon(1:27)./leftPreSites(1:27),rightTotCon(27:end)./rightPreSites(27:end)]')...
    /mean([ leftTotCon(28:end)./leftPreSites(28:end),rightTotCon(1:26)./rightPreSites(1:26) ]')-1)*100;

text(.75,2,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('Conns/tbar')
ylim([0 5])


subplot(1,2,2)
boxplot([ [leftPNCon(1:27)./leftTotCon(1:27),rightPNCon(27:end)./rightTotCon(27:end),...
   leftPNCon(28:end)./leftTotCon(28:end),rightPNCon(1:26)./rightTotCon(1:26) ]'], [ones(53,1); 2*ones(51,1)])

meanPNFractDiff=(mean([leftPNCon(1:27)./leftTotCon(1:27),rightPNCon(27:end)./rightTotCon(27:end)]')...
    /mean([ leftPNCon(28:end)./leftTotCon(28:end),rightPNCon(1:26)./rightTotCon(1:26) ]')-1)*100;

text(.75,.2,[num2str(meanPNFractDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('Fract PN Conns')
ylim([0 .5])


% Ipsi Contra total Connection/ pn connection Density

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)

boxplot([ [leftTotCon(1:27)./leftLengths(1:27),rightTotCon(27:end)./rightLengths(27:end),...
   leftTotCon(28:end)./leftLengths(28:end),rightTotCon(1:26)./rightLengths(1:26) ]'], [ones(53,1); 2*ones(51,1)])

meanConDensDiff=(mean([leftTotCon(1:27)./leftLengths(1:27),rightTotCon(27:end)./rightLengths(27:end)]')...
    /mean([leftTotCon(28:end)./leftLengths(28:end),rightTotCon(1:26)./rightLengths(1:26) ]')-1)*100;

text(.75,.4*10^-3,[num2str(meanConDensDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('Connection density (conns/nm)')
ylim([0 2*10^-3])


subplot(1,2,2)

boxplot([ [leftPNCon(1:27)./leftLengths(1:27),rightPNCon(27:end)./rightLengths(27:end),...
   leftPNCon(28:end)./leftLengths(28:end),rightPNCon(1:26)./rightLengths(1:26) ]'], [ones(53,1); 2*ones(51,1)])

meanPNConDensDiff=(mean([leftPNCon(1:27)./leftLengths(1:27),rightPNCon(27:end)./rightLengths(27:end)]')...
    /mean([leftPNCon(28:end)./leftLengths(28:end),rightPNCon(1:26)./rightLengths(1:26) ]')-1)*100;

text(.75,.2*10^-3,[num2str(meanPNConDensDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('PN Connection density (conns/nm)')
ylim([0 1*10^-3])

%% Broken out by ORN pop and hemisphere


%Ipsi axons form more synapses in the glomerulus than contra and form more
%connections with PNs

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([[leftPreSites(1:27)]';[rightPreSites(1:26)]'], [ones(27,1); 2*ones(26,1)])
meanTbarDiff=(mean([leftPreSites(1:27)]')/mean([rightPreSites(1:26)]')-1)*100;
text(1,70,[num2str(meanTbarDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glomerulus','contra'};
ylabel('Tbar Counts')
ylim([0 80])

subplot(1,2,2)
boxplot([[leftPNCon(1:27),rightPNCon(27:end)]';[leftPNCon(28:end),rightPNCon(1:26)]'], [ones(53,1); 2*ones(51,1)])
meanPNConDiff=(mean([leftPNCon(1:27),rightPNCon(27:end)]')/mean([leftPNCon(28:end),rightPNCon(1:26)]')-1)*100;
text(1,100,[num2str(meanPNConDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('PN Connections')
ylim([0 110])



% Diff in divergence 

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([ [leftTotCon(1:27)./leftPreSites(1:27)],...
   [rightTotCon(1:26)./rightPreSites(1:26) ]]', [ones(27,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftTotCon(1:27)./leftPreSites(1:27)])...
    /mean( [rightTotCon(1:26)./rightPreSites(1:26) ])-1)*100;

text(.75,2,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Left ORNs')
ylabel('Conns/tbar')
ylim([0 5])


subplot(1,2,2)

boxplot([ [leftTotCon(28:end)./leftPreSites(28:end)],...
   [rightTotCon(27:end)./rightPreSites(27:end) ]]', [ones(25,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftTotCon(28:end)./leftPreSites(28:end)])...
    /mean( [rightTotCon(27:end)./rightPreSites(27:end) ])-1)*100;

text(.75,2,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Right ORNs')
ylabel('Conns/tbar')
ylim([0 5])


% Diff in fract conns onto PNs

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([ [leftPNCon(1:27)./leftTotCon(1:27)],...
   [rightPNCon(1:26)./rightTotCon(1:26) ]]', [ones(27,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftPNCon(1:27)./leftTotCon(1:27)])...
    /mean( [rightPNCon(1:26)./rightTotCon(1:26) ])-1)*100;

text(.75,.6,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Left ORNs')
ylabel('Fract Conns onto PNs')
ylim([0 .7])


subplot(1,2,2)

boxplot([ [leftPNCon(28:end)./leftTotCon(28:end)],...
   [rightPNCon(27:end)./rightTotCon(27:end) ]]', [ones(25,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftPNCon(28:end)./leftTotCon(28:end)])...
    /mean( [rightPNCon(27:end)./rightTotCon(27:end) ])-1)*100;

text(.75,.6,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Right ORNs')
ylabel('Fract Conns onto PNs')
ylim([0 .7])



% Connection density

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([ [leftTotCon(1:27)./leftLengths(1:27)],...
   [rightTotCon(1:26)./rightLengths(1:26) ]]', [ones(27,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftTotCon(1:27)./leftLengths(1:27)])...
    /mean( [rightTotCon(1:26)./rightLengths(1:26) ])-1)*100;

text(.75,.6*10^-3,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Left ORNs')
ylabel('Conn Density (conns/nm)')
 ylim([0 2*10^-3])


subplot(1,2,2)

boxplot([ [leftTotCon(28:end)./leftLengths(28:end)],...
   [rightTotCon(27:end)./rightLengths(27:end) ]]', [ones(25,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftTotCon(28:end)./leftLengths(28:end)])...
    /mean( [rightTotCon(27:end)./rightLengths(27:end) ])-1)*100;

text(.75,.6*10^-3,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Right ORNs')
ylabel('Conn Density (conns/nm)')
ylim([0 2*10^-3])


% PN Connection density

figure()
set(gcf, 'Color', 'w')

subplot(1,2,1)
boxplot([ [leftPNCon(1:27)./leftLengths(1:27)],...
    [rightPNCon(1:26)./rightLengths(1:26) ]]', [ones(27,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftPNCon(1:27)./leftLengths(1:27)])...
    /mean( [rightPNCon(1:26)./rightLengths(1:26) ])-1)*100;

text(.75,.85*10^-3,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Left ORNs')
ylabel('PN Conn Density (pn conns/nm)')
ylim([0 1*10^-3])


subplot(1,2,2)

boxplot([ [leftPNCon(28:end)./leftLengths(28:end)],...
    [rightPNCon(27:end)./rightLengths(27:end) ]]', [ones(25,1); 2*ones(26,1)])

meanDivDiff=(mean( [leftPNCon(28:end)./leftLengths(28:end)])...
    /mean( [rightPNCon(27:end)./rightLengths(27:end) ])-1)*100;

text(.75,.85*10^-3,[num2str(meanDivDiff),'% diff between means' ])
ax=gca;
ax.XTickLabel={'Left Glom','Right Glom'};
title('Right ORNs')
ylabel('PN Conn Density (pn conns/nm)')
ylim([0 1*10^-3])






