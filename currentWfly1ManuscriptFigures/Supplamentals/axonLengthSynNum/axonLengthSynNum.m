%% The purpose of this piece of code is to examine the relationship between axon length within a glomerulus and Syn Number

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);


%Load the axon length and presynaptic site number data
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/ornOutputSynDensity/leftAxons')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/ornOutputSynDensity/rightAxons')


% For each ORN calculate its total within glomerulus axon lengths 
leftCounter=1;
rightCounter=1;

for p=1:length(ORNs)
    
    leftRunL=[];
    leftRunPS=[];
    
    
    for j=1:size(leftAxons{p},2)
        
        leftRunL=[leftRunL, leftAxons{p}(1,j)];
        leftRunPS=[leftRunPS,leftAxons{p}(2,j)];
        
    end
    
    if isnan(leftRunPS)==1
        
    else
    
    leftLengths(leftCounter)=sum(leftRunL);
    leftPreSites(leftCounter)=sum(leftRunPS);
    leftCounter=leftCounter+1;
    
    end
    
    rightRunL=[];
    rightRunPS=[];
    
    
    for j=1:size(rightAxons{p},2)
        
        rightRunL=[rightRunL, rightAxons{p}(1,j)];
        rightRunPS=[rightRunPS,rightAxons{p}(2,j)];
        
    end
    
    if isnan(rightRunPS)==1
    else
    
    rightLengths(rightCounter)=sum(rightRunL);
    rightPreSites(rightCounter)=sum(rightRunPS);
    rightCounter=rightCounter+1;
    end
end






%% Plotting, all ORNs in each hemisphere

figure()
set(gcf, 'Color', 'w')

scatter(leftLengths,leftPreSites, 'filled')
hold on
scatter(rightLengths,rightPreSites  ,'r', 'filled')


xlabel('Cable Length (nm)', 'FontSize', 16)
ylabel('Tbar Num', 'FontSize',16)
ax=gca;
ax.FontSize=16;
xlim([0 2.0*10^5])
ylim([0 90])

legend({'Right Glom','Left Glom'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics

[pRho, pP]=corr([leftLengths' ; rightLengths'], [leftPreSites';rightPreSites'])
text(1*10^5,20,{['Pearson''s R val: ', num2str(pRho)]; ['Pearson''s P val: ', num2str(pP)]}, 'FontSize', 16)

saveas(gcf,'axonLengthVFractInput')


%% Plotting broken out by ORN population and hemisphere

figure()
subplot(2,2,1)
set(gcf, 'Color', 'w')
scatter(leftLengths(1:27),leftPreSites(1:27), 'filled')
xlabel('Cable Length')
ylabel('Tbar Num')
xlim([0 2.0*10^5])
ylim([0 90])
title('Left Glomerulus')
legend({'Left ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(leftLengths(1:27)',leftPreSites(1:27)', 'type','Spearman')
text(1.2*10^5,20,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})



subplot(2,2,2)
set(gcf, 'Color', 'w')
scatter(leftLengths(28:end),leftPreSites(28:end), 'r','filled')
xlabel('Cable Length')
ylabel('tbar num')
xlim([0 2.0*10^5])
ylim([0 90])
title('Left Glomerulus')
legend({'Right ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(leftLengths(28:end)',leftPreSites(28:end)', 'type','Spearman')
text(1.2*10^5,20,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})


subplot(2,2,3)
set(gcf, 'Color', 'w')
scatter(rightLengths(1:27),rightPreSites(1:27), 'filled')
xlabel('Cable Length')
ylabel('Tbar Num')
xlim([0 2.0*10^5])
ylim([0 90])
title('Right Glomerulus')
legend({'Left ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(rightLengths(1:27)',rightPreSites(1:27)', 'type','Spearman')
text(1.2*10^5,20,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})


subplot(2,2,4)
set(gcf, 'Color', 'w')
scatter(rightLengths(28:end),rightPreSites(28:end),'r', 'filled')
xlabel('Cable Length')
ylabel('Tbar Num')
xlim([0 2.0*10^5])
ylim([0 90])
title('Right Glomerulus')
legend({'Right ORNs'}, 'Location', 'NorthWest')

%Statistics

[pRho, pP]=corr(rightLengths(28:end)',rightLengths(28:end)', 'type','Spearman')
text(1.2*10^5,.02,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})


saveas(gcf,'axonLengthVFractInput_brokenOut')



