%The goal of this code is to calculate the path lengths of ORN axons
%within individual glomeruli. Additionally I would also like
%to find the number of ORn output synapses

%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);


%% Calculate cable length of each ORNs axons in both hemispheres, record # of output synapses

%for each ORN

for p=1:length(ORNs)
    p
    % Step #1 load ORN skeletons
    workingSkel=loadjson(['~/tracing/skeletons/',num2str(ORNs(p)),'.json']);
    
    
    % STEP 2: generate the directed, weighted adjacency matrix and graph obj
    %also return the list of skeleton vertex names that went into this
    %adjacency matrix
    [adjMat, skelVertNames]=getSkelAdjMat_DW_ORN(workingSkel);
    
    
    %matrix is transposed to reflect my view of parent/child relationships,
    %this is troublesome because I dont think it should be the
    %case******!!!!!!!! TALK W? WEI ABOUT THIS
    adjMat=adjMat';
    
    %make a biograph object out of it
    G=biograph(adjMat);
    
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the left axon/s
    axonCounter=1;
    start=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'left axon') == 1
                
                start(axonCounter)=v;
                
                %leftStartNodeName=skelVertNames(v)
                axonCounter=axonCounter+1;
                
            else
            end
        end
    end
    
     % left axon node was improperly placed on ORN 15, use node
    % 693320 instead.
    
    if p == 34
        
        start=find(strcmp('x0x36_93320', skelVertNames));
    else
    end
    
    %check to see if there is a left axon, for our one unilateral R ORN there
    %will not be
    if isempty(start)
        
        totalLength(s)=NaN;
        preSiteNum(s)=NaN;
        
    else
        for s = 1:length(start)
            % step 4 identify all nodes that are descendants of the left axon start
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            leftAxonInds=G.traverse(start(s));
            
            %In this strange case the left axon is returned as the commisure segment.
            %Since it is a right ORN I will take the left axon to be anything left of
            %the midline that is left over when we remove the commisure vertices from
            %our list
            
            if p == 33
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
                counter=1;
                for k=1:numel(leftAxonInds)
                    
                    if workingSkel.vertices.(cell2mat(skelVertNames(leftAxonInds(k)))).x<4.4*10^5
                        
                        rightSideVerts(counter)=k;
                        counter=counter+1;
                        
                    else
                    end
                    
                    
                end
                
                leftAxonInds(rightSideVerts)=[];
                
            else
            end
            
            
            %In some cases the 'left axon' tag is on the wrong side of the root node so
            %the traverse above returns all nodes other than those from the left axon.
            % I am dealing with this by identifying all cases in which the "left axon"
            % consists of more than 2k nodes and simply taking the inverse set of
            % indicies in these cases
            
            if numel(leftAxonInds)>2000
                
                allInds=1:length(adjMat);
                correctedLeftAxInds=allInds;
                correctedLeftAxInds(leftAxonInds)=[];
                leftAxonInds=correctedLeftAxInds;
                
            else
                
            end
            
            
            counter=1;
            for j=leftAxonInds
                
                
                vertLocsL{p}(counter,1)=workingSkel.vertices.(cell2mat(skelVertNames(j))).x;
                vertLocsL{p}(counter,2)=workingSkel.vertices.(cell2mat(skelVertNames(j))).y;
                vertLocsL{p}(counter,3)=workingSkel.vertices.(cell2mat(skelVertNames(j))).z;
                counter=counter+1;
                
            end
            
            
            
            % Step 5 We want to calculate the total path length of this subgraph
            
            %NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different
            
            %For now I guess I am going to do this by pulling values from my adjacency
            %matrix, there is probably a smarter/more elegant way to do this
            
            %For each node in this sub-arbor
            runningLength=[];
            
            
            for i=1:length(leftAxonInds)
                
                %We are going to ask whether it is connected to all other nodes in the
                %sub-arbor
                
                others=leftAxonInds;
                others(i)=[];
                
                for j=others;
                    
                    
                    if adjMat(leftAxonInds(i),j) ~= 0
                        
                        runningLength=[runningLength, adjMat(leftAxonInds(i),j)];
                        
                    else
                    end
                end
            end
            
            totalLength(s)=sum(runningLength);
            
            % Step 6 find all presynaptic sites in this subarbor
            preSiteCounter=0;
            
            for v=leftAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                        
                        preSiteCounter=preSiteCounter+1;
                        
                    else
                    end
                end
            end
            
            preSiteNum(s)=preSiteCounter;
            
            
        end
        
    end
    
    leftAxons{p}(1,:)=totalLength;
    leftAxons{p}(2,:)=preSiteNum;
    
    totalLength=[];
    preSiteNum=[];
    
    % This loop runs over the the verts that will go into the Adj Mat and looks for
    % the start of the right axons
    
    axonCounterR=1;
    rightStart=[];
    
    for v =1:length(skelVertNames)
        
        if isempty(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels)) == 1
        else
            
            if regexp(cell2mat(workingSkel.vertices.(cell2mat(skelVertNames(v))).labels),'right axon') == 1
                
                rightStart(axonCounterR)=v;
                %leftStartNodeName=skelVertNames(v)
                axonCounterR=axonCounterR+1;
                
            else
            end
        end
    end
    
    %check to see if there is a right axon, for our one unilateral L ORN there
    %will not be
    if isempty(rightStart)
        
        totalLength(s)=NaN;
        preSiteNum(s)=NaN;
        
    else
        
        for s = 1:length(rightStart)
            % step 4 identify all nodes that are descendants of the right axon starts
            
            
            %Traverse the graph from the left axon start vertex, as long as this node has
            %all the glomerular collateral as descendants and no connection back to its
            %parent this should yield the indicies of all nodes (from skelVertNames)
            %involved in the collateral
            
            if p==43
                
                rightAxonInds=unique([G.traverse(rightStart),G.traverse(2346)]);
            else
                
                
                rightAxonInds=G.traverse(rightStart(s));
            end
            
            
            counter=1;
            for j=rightAxonInds
                
                
                vertLocsR{p}(counter,1)=workingSkel.vertices.(cell2mat(skelVertNames(j))).x;
                vertLocsR{p}(counter,2)=workingSkel.vertices.(cell2mat(skelVertNames(j))).y;
                vertLocsR{p}(counter,3)=workingSkel.vertices.(cell2mat(skelVertNames(j))).z;
                counter=counter+1;
            end
            
            
            % Step 5 We want to calculate the total path length of this subgraph
            
            %NOTE:NEED SOME WAY TO CHECK THIS, nC answer is slightly different
            
            %For now I guess I am going to do this by pulling values from my adjacency
            %matrix, there is probably a smarter/more elegant way to do this
            
            %For each node in this sub-arbor
            runningLength=[];
            
            for i=1:length(rightAxonInds)
                
                %We are going to ask whether it is connected to all other nodes in the
                %sub-arbor
                
                others=rightAxonInds;
                others(i)=[];
                
                for j=others;
                    
                    
                    if adjMat(rightAxonInds(i),j) ~= 0
                        
                        runningLength=[runningLength, adjMat(rightAxonInds(i),j)];
                        
                    else
                    end
                end
            end
            
            totalLength(s)=sum(runningLength);
            
            % Step 6 find all presynaptic sites in this subarbor
            
            preSiteCounter=0;
            
            for v=rightAxonInds
                
                children=fieldnames(workingSkel.connectivity.(cell2mat(skelVertNames(v))));
                
                for c=1:length(children)
                    
                    if strcmp(workingSkel.connectivity.(cell2mat(skelVertNames(v))).(cell2mat(children(c))).type, 'postsynaptic_to') == 1
                        
                        preSiteCounter=preSiteCounter+1;
                        
                    else
                    end
                end
            end
            
            preSiteNum(s)=preSiteCounter;
            
            
        end
    end
    
    rightAxons{p}(1,:)=totalLength;
    rightAxons{p}(2,:)=preSiteNum;
    
    totalLength=[];
    preSiteNum=[];
    toc
end



save('leftAxons', 'leftAxons')
save('rightAxons', 'rightAxons')


%% Path Length

load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/leftAxons')
load('~/Documents/MATLAB/tracingCode2/currentWfly1ManuscriptFigures/Supplamentals/ornOutputSynDensity/rightAxons')



% For each ORN calculate its total ipsi within glomerulus length

for p=1:length(ORNs)
    
    leftRunL=[];
    leftRunPS=[];
    
    
    for j=1:size(leftAxons{p},2)
        
        leftRunL=[leftRunL, leftAxons{p}(1,j)];
        leftRunPS=[leftRunPS,leftAxons{p}(2,j)];
        
    end
    
    leftLengths(p)=sum(leftRunL);
    leftPreSites(p)=sum(leftRunPS);
    
    
    rightRunL=[];
    rightRunPS=[];
    
    
    for j=1:size(rightAxons{p},2)
        rightRunL=[rightRunL, rightAxons{p}(1,j)];
        rightRunPS=[rightRunPS,rightAxons{p}(2,j)];
    end
    
    rightLengths(p)=sum(rightRunL);
    rightPreSites(p)=sum(rightRunPS);
    
end

%% Calculate fractional input values

%Load ornToPn contact Num matrix
load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/ornToPn.mat');


% Now divide each element by the sum of the column it is in
contactNum_Fract=zeros(53,5);

for c=1:5
    
    contactNum_Fract(1:27,c)=ornsToPn(1:27,c)./sum(ornsToPn(1:27,c));
    contactNum_Fract(28:end,c)=ornsToPn(28:end,c)./sum(ornsToPn(28:end,c));
    
end



%% tbar density (#tbar/cable length) V. mean fractional input to LEFT PNs

%combine tbar density and mean fractional input to PNs in one array, remove
%rows corresponding to unilateral ORNs in the hemisphere they neglect


rightAxonDensFracts=[];
rightAxonDensFracts(:,1)=rightPreSites./rightLengths;
rightAxonDensFracts(:,2)=mean(contactNum_Fract(:,[3,4])');
rightAxonDensFracts(find(isnan(rightAxonDensFracts(:,1))),:)=[];



leftAxonDensFracts=[];
leftAxonDensFracts(:,1)=leftPreSites./leftLengths;
leftAxonDensFracts(:,2)=mean(contactNum_Fract(:,[1,2,5])');
leftAxonDensFracts(find(isnan(leftAxonDensFracts(:,1))),:)=[];

%% Plotting

%All ORNs in both hemispheres

figure()
set(gcf, 'Color', 'w')

scatter(leftAxonDensFracts(:,1), leftAxonDensFracts(:,2), 'filled')
hold on
scatter(rightAxonDensFracts(:,1),rightAxonDensFracts(:,2),'r', 'filled')

xlabel('Tbar Density (tbars/nm)', 'FontSize', 16)
ylabel('Mean Fractional Input to PNs', 'FontSize',16)
ax=gca;
ax.FontSize=16;
xlim([2*10^-4 5*10^-4])
ylim([0.005 0.065])
legend({'Left Glomerulus','Right Glomerulus'}, 'FontSize', 16, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr([leftAxonDensFracts(:,1);rightAxonDensFracts(:,1)],[leftAxonDensFracts(:,2);rightAxonDensFracts(:,2)], 'type','Spearman')
text(4*10^-4,.01,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]}, 'FontSize', 16)


saveas(gcf,'tbarDensityFractInput')


%% Plotting

%Broken out by ORN Population and hemispheres

figure()
subplot(2,2,1)
set(gcf, 'Color', 'w')
scatter(leftAxonDensFracts(1:27,1), leftAxonDensFracts(1:27,2), 'filled')

xlabel('Tbar Density (tbars/nm)')
ylabel('Mean Fractional Input')
ax=gca;
xlim([2*10^-4 5*10^-4])
ylim([0.005 0.065])


title('Left Glomerulus')

legend({'Left ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(leftAxonDensFracts(1:27,1), leftAxonDensFracts(1:27,2), 'type','Spearman')
text(4.1*10^-4,.02,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})



subplot(2,2,2)
set(gcf, 'Color', 'w')
scatter(leftAxonDensFracts(28:end,1), leftAxonDensFracts(28:end,2),'r', 'filled')

xlabel('Tbar Density (tbars/nm)')
ylabel('Mean Fractional Input')
ax=gca;
xlim([2*10^-4 5*10^-4])
ylim([0.005 0.065])
title('Left Glomerulus')

legend({'Right ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(leftAxonDensFracts(28:end,1), leftAxonDensFracts(28:end,2), 'type','Spearman')
text(4.1*10^-4,.02,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})

subplot(2,2,3)
set(gcf, 'Color', 'w')
scatter(rightAxonDensFracts(1:27,1), rightAxonDensFracts(1:27,2), 'filled')

xlabel('Tbar Density (tbars/nm)')
ylabel('Mean Fractional Input')
ax=gca;
xlim([2*10^-4 5*10^-4])
ylim([0.005 0.065])
title('Right Glomerulus')

legend({'Left ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(rightAxonDensFracts(1:27,1), rightAxonDensFracts(1:27,2), 'type','Spearman')
text(4.1*10^-4,.02,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})


subplot(2,2,4)
set(gcf, 'Color', 'w')
scatter(rightAxonDensFracts(28:end,1), rightAxonDensFracts(28:end,2),'r', 'filled')

xlabel('Tbar Density (tbars/nm)')
ylabel('Mean Fractional Input')
ax=gca;
xlim([2*10^-4 5*10^-4])
ylim([0.005 0.065])
title('Right Glomerulus')

legend({'Right ORNs'}, 'Location', 'NorthWest')

%Statistics
[pRho, pP]=corr(rightAxonDensFracts(28:end,1), rightAxonDensFracts(28:end,2), 'type','Spearman')
text(4.1*10^-4,.02,{['Spearman''s R val: ', num2str(pRho)]; ['Spearman''s P val: ', num2str(pP)]})



saveas(gcf,'tbarDensityFractInput_brokenOut')