%% Load annotations and connectors


% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
% PNs=annotations.PN;
PNs=sort(annotations.DM6_0x20_PN);
% PNs=annotations.DM6_0x20_PN;

% return all skel IDs with *LN* in fieldname
Fn = fieldnames(annotations);
selFn = Fn(~cellfun(@isempty,regexp(Fn,'LN')));

LNs=[];
for i = 1:numel(selFn)
    LNs=[LNs, annotations.(selFn{i})];
end

LNs = unique(LNs);

%
% LNs=annotations.LN;
% LNs=[LNs, annotations.potential_0x20_LN];
% LNs=[LNs, annotations.Prospective_0x20_LN];
% LNs=[LNs, annotations.Likely_0x20_LN];


%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);


%%

numPostPNL=[];
numPostNonPNL=[];

numPostPNR=[];
numPostNonPNR=[];


for c = 1:length(connFields)
    
    curConnID=cell2mat(connFields(c));
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(curConnID).pre) == 1
        
        %or an empty postsynaptic field, if its empty it will be a cell
    elseif iscell(conns.(curConnID).post) == 1
        
    else
        
        pre=conns.(curConnID).pre;
        post=conns.(curConnID).post;
        
        if ismember(pre,ORNs)==1 && sum(ismember(post,PNs))>0
            
            if ismember(max(find(ismember(PNs, post))),[1,2,5]) == 1
                
                numPostNonPNL=[numPostNonPNL,numel(post)-sum(ismember(post,PNs))];
                numPostPNL=[numPostPNL,sum(ismember(post,PNs))];
                
            else
                
                numPostNonPNR=[numPostNonPNR,numel(post)-sum(ismember(post,PNs))];
                numPostPNR=[numPostPNR,sum(ismember(post,PNs))];
                
            end
        else
        end
    end
    
    
    
end


%% Plotting

figure()
set(gcf,'color','w')

jitterAmount = 0.25;
jitterValuesX = 2*(rand(size([numPostPNL,numPostNonPNL]))-0.5)*jitterAmount;   % +/-jitterAmount max
jitterValuesY = 2*(rand(size([numPostPNL,numPostNonPNL]))-0.5)*jitterAmount;   % +/-jitterAmount max



scatter([ones(size(numPostPNL)),3*ones(size(numPostNonPNL))]+jitterValuesX,...
    [numPostPNL,numPostNonPNL]+jitterValuesY)
    

%boxplot([numPostPNL,numPostNonPNL],[ones(size(numPostPNL)),2*ones(size(numPostNonPNL))], 'notch', 'on')
hold on 

jitterAmount = 0.25;
jitterValuesX = 2*(rand(size([numPostPNR,numPostNonPNR]))-0.5)*jitterAmount;   % +/-jitterAmount max
jitterValuesY = 2*(rand(size([numPostPNR,numPostNonPNR]))-0.5)*jitterAmount;   % +/-jitterAmount max

scatter([2*ones(size(numPostPNR)),4*ones(size(numPostNonPNR))]+jitterValuesX...
    ,[numPostPNR,numPostNonPNR]+jitterValuesY)
set(gca,'XTick',[1,2,3,4])
xlim([0,5])
set(gca,'XTickLabel',{'Post PN', 'Post PN','Post Non-PN', 'Post Non-PN'})
ylabel('Counts')
legend({'Left Synapses','Right Synapses'})
set(gca,'FontSize',18)


figure()
set(gcf,'color','w')

boxplot([numPostPNL,numPostPNR, numPostNonPNL,numPostNonPNR],...
    [ones(size(numPostPNL)),2*ones(size(numPostPNR)),3*ones(size(numPostNonPNL)),4*ones(size(numPostNonPNR))]...
    ,'Labels',{'Left Post PNs','Right Post PNs','Left Post Non-PNs','Right Post Non-PNs'})
ylabel('Counts')
set(gca,'FontSize',18)





figure()
set(gcf,'color','w')
edges=[0.5:1:7.5];
subplot(1,2,1)
histogram(numPostPNL, 'BinEdges',edges,'Normalization','probability')
hold on
histogram(numPostPNR, 'BinEdges',edges,'Normalization','probability')
box off
ylabel('Probability')
xlabel('# Postsynaptic PN Profiles')
%legend({'Left Glomerulus','Right Glomerulus'})
ylim([0 .6])
xlim([0 10])
set(gca,'FontSize',18)

edges=[0.5:1:9.5];
subplot(1,2,2)
histogram(numPostNonPNL, 'BinEdges',edges,'Normalization','probability')
hold on
histogram(numPostNonPNR, 'BinEdges',edges,'Normalization','probability')
legend({'Left Glomerulus','Right Glomerulus'})
box off
%ylabel('Probability')
xlabel('# Postsynaptic Non-PN Profiles')
ylim([0 .6])
xlim([0 10])
set(gca,'FontSize',18)




figure()
set(gcf,'color','w')


set(gca,'FontSize',18)


