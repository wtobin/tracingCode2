%{
Ok some pseudocode

1. Create list of the left and right ORNs for which i have measured synapse
size

2. Copy all connectorID_initials.nii segmention files to a single directory

3. For each ORN-PN pair, Search through the connector list and at each
connector where the cells are connected, pull the tbar volume and
postsynaptic membrane area. Store these measures in an array thats like
array(orn,pn,1)=tbarArea array(orn, p,2)=membrane area

4. Compare ipsi/contra, left right sizes and test significance





%}

%% make lists of ORNs and PNs that have been segmented, load conn list

leftORNSubset=[337396,401197,492811,320688,699676];
rightORNSubset=[360235,362982,332797,379044,362999];

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);

%%
%{
For each ORN-PN pair, Search through the connector list and at each
connector where the cells are connected, pull the tbar volume and
postsynaptic membrane area. Store these measures in an array thats like
array(orn,pn,1)=tbarArea array(orn, p,2)=membrane area
%}

tbarLabel=6;
basePath='/Users/williamtobin/Desktop/wfly1_synapseVols2/';
cd(basePath)
elementSizes=cell(10,5,4);
segIDs=cell(10,5);
Users={'JK','HY','BS','WC'};
ratioCollection=[];
multiCount=1;
multiSynList=zeros(0,3);

%Loop over tracers
for u=1:4
    
    ornCounter=0;
    
    %Loop over ORNs
    for o =leftORNSubset(1) %[leftORNSubset, rightORNSubset]
        tic
        ornCounter=ornCounter+1;
        pnCounter=0;
        
        %Loop over PNs
        for p = PNs(1)
            pnCounter=pnCounter+1;
            
            %Assign the current PN's itk snap segmentation label to the
            %postLabel variable
            
            if p == 427345
                postLabel=1;
            elseif p == 419138
                postLabel=2;
            elseif p ==668267
                postLabel=3;
            elseif p==480245
                postLabel=4;
            elseif p==638603
                postLabel=5;
            end
            
            synCounter=0;
            
            %Loop over all connectors in the dataset
            for curField = 1:length(connFields)
                
                c=connFields(curField);
                
                %Store connID
                connID=cell2mat(c);
                connID=connID([5,7:length(connID)]);
                
                %Store skel IDs of pre and postsynaptic neurons at this
                %synapse
                pre=conns.(cell2mat(c)).pre;
                post=conns.(cell2mat(c)).post;
                
                %Make sure there is a presynaptic neuron at this conn
                if isempty(pre)==1
                else
                    %Check to see if the current ORN is presynaptic and the
                    %current PN postsynaptic
                    
                    if pre == o && ismember(p,post)==1
                        
                        %Find this connectors directory
                        [F,synPath]=system(['find ~/Desktop/wfly1_synapseVols2 -type d -name ',connID]);
                        
                        %store a list of the seg files we have for
                        %this connector
                        curSegFileDir=dir(strcat(synPath,'/',connID,'_**.nii'));
                        
                        
                        %A flag to indicate whether this tracer has
                        %segmented this synapse or not
                        segFlag=0;
                        
                        
                        %If there are any
                        if isempty(curSegFileDir)==1
                            
                            error('Weird, no files for this syn')
                            
                        else
                            
                            %Loop over each segmentation file for this
                            %connector
                            for f =1:length(curSegFileDir)
                                
                                %See if the current tracer was the author
                                if sum(curSegFileDir(f).name(end-5:end-4)==Users{u})==2
                                    
                                    segFlag=1;
                                    
                                    
                                    %load the connector segmentation
                                    
                                    curSegFile=load_nii(strcat(synPath,'/', curSegFileDir(f).name));
                                    segStack=curSegFile.img;
                                    
                                    %Load the locations text file and check
                                    %to see if the current pn is present
                                    %more than once at this synapse
                                    
                                    locations=loadjson(strcat( synPath,'/locations.json'));
                                    strP=num2str(p);
                                    pnField=['x0x3',strP(1),'_',strP(2:end)];
                                    numPNProfs=size(locations.(pnField),1);
                                    
                                    
                                    %If it hasnt already been logged as a
                                    %multiPN
                                    %store this connectors info for by
                                    %hand sorting of pn profile
                                    %segmentations
                                    
                                    if numPNProfs>1 && ismember([str2num(connID),o,p],multiSynList,'rows')==0
                                        
                                        forHandSeg{multiCount,1}=synPath;
                                        forHandSeg{multiCount,2}=postLabel;
                                        multiCount=multiCount+1
                                        multiSynList=[multiSynList;[str2num(connID),o,p]];
                                        
                                        
                                    else
                                        
                                    end
                                    
                                    
                                    %Add a row to the array for each
                                    %postsynaptic PN profile present, if
                                    %this is a single prof fill in the
                                    %array with measurements of tbar vol
                                    %and pn Area. If there are >1 pn
                                    %profiles fill in the pn area measure with nan
                                    
                                    for c=1:numPNProfs
                                        
                                        %Increment synapse count
                                        synCounter=synCounter+1;
                                        
                                        if numPNProfs>1
                                            
                                            tbarMeas=measureSeg(curSegFile.img,tbarLabel);
                                            
                                            %Store volume and area for this synapse
                                            elementSizes{ornCounter,pnCounter,u}(synCounter,1)=sum(tbarMeas);
                                            elementSizes{ornCounter,pnCounter,u}(synCounter,2)=nan;
                                            
                                        else
                                            
                                            
                                            tbarMeas=measureSeg(curSegFile.img,tbarLabel);
                                            pnMeas=measureSeg(curSegFile.img,postLabel);
                                            
                                            %Store volume and area for this synapse
                                            elementSizes{ornCounter,pnCounter,u}(synCounter,1)=sum(tbarMeas);
                                            elementSizes{ornCounter,pnCounter,u}(synCounter,2)=sum(pnMeas);
                                            
                                        end
                                        
                                        elementSizes{ornCounter,pnCounter,u}(synCounter,3)=numel(post);
                                        elementSizes{ornCounter,pnCounter,u}(synCounter,4)=sum(ismember(post,PNs));
                                        elementSizes{ornCounter,pnCounter,u}(synCounter,5)=locations.(pnField)(c,1);
                                        elementSizes{ornCounter,pnCounter,u}(synCounter,6)=locations.(pnField)(c,2);
                                        elementSizes{ornCounter,pnCounter,u}(synCounter,7)=locations.(pnField)(c,3);
                                        
                                        
                                    end
                                    
                                    %Store the connector ID
                                    segIDs{ornCounter,pnCounter}(synCounter)={connID};
                                    
                                end
                                
                                
                            end
                            
                            
                            
                            
                            %If this user has not segmented this
                            %synapse fill this slot with Nans to keep
                            %connection matricies the same size
                            if segFlag==0
                                
                                %Load the locations text file and check
                                %to see if the current pn is present
                                %more than once at this synapse
                                
                                locations=loadjson(strcat( synPath,'/locations.json'));
                                strP=num2str(p);
                                pnField=['x0x3',strP(1),'_',strP(2:end)];
                                numPNProfs=size(locations.(pnField),1);
                                
                                %One entry for each postsynaptic pn profile at
                                %this connector
                                
                                for c=1:numPNProfs
                                    
                                    %Increment synapse count
                                    synCounter=synCounter+1;
                                    
                                    %fill w/ nans, locs to make sure
                                    %correspondence is correct
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,1)=nan;
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,2)=nan;
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,3)=nan;
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,4)=nan;
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,5)=locations.(pnField)(c,1);
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,6)=locations.(pnField)(c,2);
                                    elementSizes{ornCounter,pnCounter,u}(synCounter,7)=locations.(pnField)(c,3);
                                    
                                    
                                end
                                
                            else
                            end
                            
                        end
                        
                    end
                    
                end
            end
        end
        
        toc
    end
    
    
end

save('multiSynList','multiSynList')
save('forHandSeg','forHandSeg');
save('elementSizes','elementSizes')
