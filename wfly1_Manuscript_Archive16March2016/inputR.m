%% This script is written to record each simulated mEPSP at the site of the synapse

% 1. Loop over each contact

% 2. modify the .hoc file to put the recording electrode at the synapse

% 3. save spike vector files causing only that synapse to fire once

% 4. run the simulation

% 5. load the result and save it



%% Step 0 load annotations

addpath(genpath('/home/simulation/Documents/MATLAB'));

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;


ORNs=[ORNs_Left, ORNs_Right];



PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};

%% Step 1 File handling


% make a copy of the original generatedNEURON directory and call it
% InputR

for p=1%3:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs directory within the nC_Projects dir
    % Path structure for my Ubuntu machine
    cd(['/home/simulation/nC_projects/', PN, '_allORNs_Rinput/']);
    
    % First things first, I need to make simulation directory for localMini
    % sims
    system('mkdir simulations/inputR')
    cd('simulations/inputR/')
    
    %copy the contents of generatedNEURON to this directory
    system('cp -R ../../generatedNEURON/* ./')


    % compile .mod files in this directory
    system('nrnivmodl');
    

    
    % Change the simReference = line in the hoc file and simsDir
    simName='inputR';
    simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',PN, '_allORNs_Rinput.hoc'];
    system(simRefCmd)
    
    simDir=['/home/simulation/nC_projects/',PN,'_allORNs_Rinput/simulations/'];
    simRefCmd=['sed -i -e ''s#simsDir\s\=\s\".*\"#simsDir \= \"',simDir,'\"#'' ',PN, '_allORNs_Rinput.hoc'];
    system(simRefCmd)
    
%     %Set initial Vm
%     initVm=-60; %in mv
%     runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ',PN, '_allORNs_Rinput.hoc'];
%     system(runVCmd)
    
    
     %Setsim duration
    runTime=400; %in ms
    runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN, '_allORNs_Rinput.hoc'];
    system(runTCmd)
    
 
    
end

%% Loop over each contact in each PN
   
for p=1%:length(PN_Names)
    
    
    PN=PN_Names{p};
    
    % Move to the current PNs localMini/generatedNEURON dir
    cd(['/home/simulation/nC_projects/',PN,'_allORNs_Rinput/simulations/inputR/']);
    
    %make a backup copy of the hoc file
    bkCmd=['cp ', PN,'_allORNs_Rinput.hoc ', PN,'_allORNs_Rinput.hoc.bak'];
    system(bkCmd);
    
    compartments=importdata('compartments.txt');
    
    %Identify the PN skeleton ID
    skelIDCmd=['grep -o -P ''\&a_neuron_PN\d_\SS_sk_\K\d*'' ',PN, '_allORNs_Rinput.hoc' ];
    [status, workingSkelID ]=system(skelIDCmd);
    

    for s=1:numel(compartments)
       tic
        %restore original file
        restoreCmd=['cp -f ',PN, '_allORNs_Rinput.hoc.bak ', PN, '_allORNs_Rinput.hoc'];
        system(restoreCmd);
        
          % move my Iclamp electrode to the site of the working compartment
        
        mvIclampCmd=['sed -i ''s#a_neuron_PN.*_.*S_.*\[0\]\.c.*\s{#a_neuron_',...
            PN(1:3),'_',PN(4:5),'_sk_',num2str(workingSkelID(1:6)),'[0].c',...
            num2str(compartments(s)),' {#'' ' ,PN, '_allORNs_Rinput.hoc' ];

        system(mvIclampCmd);
        
        
        % move my simulated electrode to the site of the working contact
        
        mvElecCmd=['sed -i ''s#\&a_neuron_PN.*_.*S_sk_.*\[i\]\.c.*\.v[(]0\..*[)]#\&a_neuron_',...
            PN(1:3),'_',PN(4:5),'_sk_',num2str(workingSkelID(1:6)),'[i].c',...
            num2str(compartments(s)),'.v(0.5))#'' ' ,PN, '_allORNs_Rinput.hoc' ];
        
        system(mvElecCmd);
        
        
        % plot voltage for this pos as well
        
        chngPlotCmd1=['sed -i ''s#\.c2\.v[(]0\.5[)]#\.c',...
            num2str(compartments(s)),'.v(0.5)#'' ' ,PN, '_allORNs_Rinput.hoc' ];
        
        system(chngPlotCmd1);
        
        chngPlotCmd2=['sed -i ''s#\.c2\.v#\.c',...
            num2str(compartments(s)),'.v#'' ' ,PN, '_allORNs_Rinput.hoc' ];
        
        system(chngPlotCmd2);
        
        
        %save spike vector files which are empty for all but the active
        %contact and put a single spike in that file at 10ms
        
     
            %I want to run the simulation
            
            runCmd=['nrniv ', PN, '_allORNs_Rinput.hoc'];
            system(runCmd);
            
            
            %I want to import the PNs simulated voltage trace
            
            
            %find its name
            pnResults=dir('neuron_PN*.dat');
            
            pnVm1=importdata(pnResults.name);
            
            inputR_responses{p}(s,:)=pnVm1;
            
       toc 
       
    end
    

    
end 

cd('../../../')
save('inputR_responses','inputR_responses')

%% some plotting

for p=1:5
    
    for a=1:size(inputR_responses{p},1)
        
        inputR{p}(a)=(mean(inputR_responses{p}(a,12000:13500))+60)/0.01;
        
    end
  
end

figure()
set(gcf, 'Color', 'w')

for i=1:5
    subplot(5,1,i)


histogram(inputR{i}, 49)
xlim([0 6000])
ylim([0 800])


title(PN_Names(i),'FontSize',12)

if i==5
    
    xlabel('Input R (MOhms)','FontSize',16)
    ylabel('Freq','FontSize',16)
    
else
end


text(3000,600,['Mean: ',num2str(mean(inputR{i})),' '])
text(3000,400,['SEM: ',num2str(std(inputR{i})/sqrt(numel(inputR{i})))])

end



saveas(gcf,'inputRHists')
saveas(gcf,'inputRHists', 'epsc')

% Here is code to generate a two bar bar graph where the bars represent the
% mean L and R PN input R

leftInputRs=[inputR{1},inputR{2},inputR{3}]/1000;
rightInputRs=[inputR{4},inputR{5}]/1000;

gpsU = [ones(size(leftInputRs)),2.*ones(size(rightInputRs))];
valsU = [leftInputRs,rightInputRs];
[YUmean,YUsem,YUstd,YUci] = grpstats(valsU,gpsU,{'mean','sem','std','meanci'});


%move to the figure directory to save the plot
cd('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript/Figure3/')

figure
set(gcf,'Color', 'w')
bar(YUmean,.4,'FaceColor','k','LineWidth',2)
hold on
he = errorbar(YUmean,YUsem,'k','LineStyle','none'); % error bars are std
he.LineWidth=1;
xlim([0.5 2.5])
 ylim([0 1.8])
ax = gca;
ax.XTick = [1 2];
ax.XTickLabel = {'Left PNs';'RightPNs'};
ax.FontSize=16;
ylabel('Input R (GOhms)')
axis square
saveas(gcf,'fig3PanelF')
saveas(gcf,'fig3PanelF','epsc')


