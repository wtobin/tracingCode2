

function [] = shuffledUnitaryRun( jobNum, reps, PN)

%Make sure rng is not going to repeat itself 
rng('shuffle');

%Add my matlab dir to the path 
addpath(genpath('/home/wft2/Matlab'));

%path to the dir containing the hoc files to be run
path1=['/home/wft2/nC_projects/',PN,'_allORNs/simulations/shuffUnitaries/'];
cd(path1)

%I need a loop right here that will jobNumeat this ~35 times
for i= jobNum*reps-reps+1:jobNum*reps

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);

%find the spike Vector file Number each synapse looks to for its
%activity
synNumCommand=['grep -oP ''spikeVector\K\d*'' ' , hocCpName];
[status, totSynapseNums]=system(synNumCommand);
totSynapseNums=str2num(totSynapseNums);

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

%Load ipsi ORN skel IDs
if strcmp(PN, 'PN1RS') ==1  || strcmp(PN, 'PN2RS') ==1
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Right_0x20_ORN;
else
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Left_0x20_ORN;
end

% Find synapse ids for all ipsi ORN synapses
activeSyns=[];
activeSyns=pullContactNums(ipsiORNs,path1,hocCpName);

%Shuffle synapses between ORNs
activeSyns(:,1)=activeSyns(randsample(length(activeSyns(:,1)),length(activeSyns(:,1))),1);


% make a spikeVector dir for this sim
svDirName=['spikeVectors_',num2str(i)];
mkSVDirCmd=['mkdir ../../',svDirName];
system(mkSVDirCmd);

% Change the simReference = line in the hoc file and simsDir
simName='shuffUnitaries';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
htemGroupBase=['/groups/htem/analysis/wfly1/nC_projects/',PN,'_allORNs/simulations/shuffUnitaries'];
resultDir=[htemGroupBase,'/results/rep',num2str(i)];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',resultDir,'/"#'' ',hocCpName];
system(chngResDir)

%path to the dir containing the spikeVectors that specify this models
%activity
path2=['/home/wft2/nC_projects/',PN,'_allORNs/',svDirName];

%Clear the spike trains/times variables
clear spikeTrain
clear spikeTimes

%generate a spike train that causes each ORN to fire sequentially ever
%200ms

for o=1:numel(unique(activeSyns(:,2)))
    
    spikeTimes{o}=(o*200)-100;
    
end

    
%Save a file for every synapse in the simulation. The files associated
%with the selected ORNs should contain the above generated spike times
%while all other files are blank

saveSpikeVectors(totSynapseNums,activeSyns,spikeTimes,path2)


%add a line to my script that will run this simulation
runCmd=['/groups/htem/code/neuron/nrn/x86_64/bin/nrniv ', hocCpName];
system(runCmd);

%Save the spikeTimes arrays and to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')

%Save the activeSyns arrays and to result results dir
save([resultDir,'/activeSyns'],'activeSyns')

%move the hoc file to the results dir
system(['mv ',hocCpName,' ',resultDir,'/'])

%delete the spikeVector dir
system(['rm -rf ../../',svDirName])

% Now repeat the simulation causing all mEPSPs to fire sequentially in the
% order they are found in activeSyns.


% remake a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);


% remake a spikeVector dir for this sim
svDirName=['spikeVectors_',num2str(i)];
mkSVDirCmd=['mkdir ../../',svDirName];
system(mkSVDirCmd);

% Change the simReference = line in the hoc file and simsDir
simName='shuffUnitaries';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
htemGroupBase=['/groups/htem/analysis/wfly1/nC_projects/',PN,'_allORNs/simulations/shuffUnitaries'];
resultDir=[htemGroupBase,'/results/rep',num2str(i),'/minis'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',resultDir,'/"#'' ',hocCpName];
system(chngResDir)

%path to the dir containing the spikeVectors that specify this models
%activity
path2=['/home/wft2/nC_projects/',PN,'_allORNs/',svDirName];

%Setsim duration
runTime=length(activeSyns(:,1))*200+100; %in ms
runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN,'_allORNs.hoc'];
system(runTCmd)

%Save a spike vector file for each active synapse. Drive the first syn to
%fire at 100ms and all others in 200ms increments

counter=1;

for f=1:numel(totSynapseNums)
    
    s=totSynapseNums(f);
    
    if ismember(s,activeSyns(:,1))
   
        vector=counter*200-100;
        save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
        counter=counter+1
        
    else
     
        vector=[];
        save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
        
    end
    
end




%add a line to my script that will run this simulation
runCmd=['/groups/htem/code/neuron/nrn/x86_64/bin/nrniv ', hocCpName];
system(runCmd);

%Save the spikeTimes arrays and to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')

%Save the activeSyns arrays and to result results dir
save([resultDir,'/activeSyns'],'activeSyns')

%move the hoc file to the results dir
system(['mv ',hocCpName,' ',resultDir,'/'])

%delete the spikeVector dir
system(['rm -rf ../../',svDirName])



end


end
