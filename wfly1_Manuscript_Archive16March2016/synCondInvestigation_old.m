% 
% function [] = condInvestBlock_eq( jobNum, reps, dF, PN)

%define some needed variables
i=1;
dF=0;
PN='PN1LS';

%Add my matlab dir to the path 
addpath(genpath('/home/simulation/Documents/MATLAB'));

%path to the dir containing the hoc files to be run
path1=['/home/simulation/nC_projects/',PN,'_allORNs/simulations/condInvest/'];
cd(path1)

%Move to the PN project directory
cd(['~/nC_projects/',PN,'_allORNs/'])

%make a dir in simulations for my investigation of synaptic conductances
system('mkdir simulations/condInvest')

% Copy the contents of the generatedNEURON dir to condInvest
system('cp -a generatedNEURON/. simulations/condInvest/')

%move to condInvest
cd('simulations/condInvest')

%copy vecEvent.mod to this Dir
system('cp /home/simulation/neuron/nrn/share/examples/nrniv/netcon/vecevent.mod ./')

%Compile mod files in this Dir
system('nrnivmodl')

%run hocEdsv2 on the hoc file
hocEdCmd=['python ../../../hocEdsv2.py ',PN,'_allORNs.hoc ', PN,'_allORNs'];
system(hocEdCmd)

%replace /home/william paths to /home/simulation
system(['sed -i -e ''s#\/home\/william\/#\/home\/simulation\/#'' ', PN,'_allORNs.hoc'])

%Set initial Vm
initVm=-59.4; %in mv
runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ', PN,'_allORNs.hoc'];
system(runVCmd)

%Setsim duration
runTime=200; %in ms
runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN,'_allORNs.hoc'];
system(runTCmd)

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '_TEST.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);


%find the spike Vector file Number each synapse looks to for its
%activity
grepNumCommand=['grep -oP ''spikeVector\K\d*'' ' , hocCpName];
[status, totSynapseNums]=system(grepNumCommand);
totSynapseNums=str2num(totSynapseNums);

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

%Load ipsi ORN skel IDs
if strcmp(PN, 'PN1RS') ==1  || strcmp(PN, 'PN2RS') ==1
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Right_0x20_ORN;
else
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Left_0x20_ORN;
end

% Find synapse ids for all ipsi ORN synapses
activeSyns=[];
activeSyns=pullContactNums(ipsiORNs,path1,hocCpName);

%Here is where I distribute the ipsi ORN synapses equally among all ORNs
%NEEDS TO BE TESTED

%shuffle the rows of activesyns
activeSyns=activeSyns(randperm(size(activeSyns,1),size(activeSyns,1)),:);
remain=[];

for e=1:floor(size(activeSyns,1)/numel(ipsiORNs))
    
    activeSyns(e*numel(ipsiORNs)-numel(ipsiORNs)+1:e*numel(ipsiORNs),2)=[1:numel(ipsiORNs)];
    remain(e*numel(ipsiORNs)-numel(ipsiORNs)+1:e*numel(ipsiORNs))=1;
    
end

activeSyns(sum(remain)+1:end,2)=randsample(numel(ipsiORNs),size(activeSyns,1)-sum(remain));
clear remain

% make a spikeVector dir for this sim
svDirName=['spikeVectors_',num2str(i)];
mkSVDirCmd=['mkdir ../../',svDirName];
system(mkSVDirCmd);

% Change the simReference = line in the hoc file and simsDir
simName='condInvest';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i)];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)

%path to the dir containing the spikeVectors that specify this models
%activity
path2=['/home/simulation/nC_projects/',PN,'_allORNs/',svDirName];

%Clear the spike trains/times variables
clear spikeTrain
clear spikeTimes

%generate a spike train that is spon rate for the first 100ms and spont+dF
%for the 2nd 100ms

for o=1:numel(unique(activeSyns(:,2)))
    
    spikeTrain(o,:)=[makeSpikes(.001,2.25,.099),makeSpikes(.001,(2.25+dF),.10)];
    spikeTimes{o}=find(spikeTrain(o,:)==1);
    
end

%Save a file for every synapse in the simulation. The files associated
%with the selected ORNs should contain the above generated spike times
%while all other files are blank

saveSpikeVectors(totSynapseNums,activeSyns,spikeTimes,path2)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['mv ',hocCpName,' ',resultDir,'/'])

%import result vector
pnvm1=importdata('results_reducedConductance/eq_dF0_rep1/neuron_PN1_LS_sk_419138_0.dat');

subplot(2,1,1)
plot(pnvm1)
hold on


%move the recording electrode to the site c7821 0.7726679 by hand


%Set the name of the directory to which the results will be saved
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i),'_local'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['mv ',hocCpName,' ',resultDir,'/'])

%import result vector NOTE: failed to save to proper dir
pnvm2=importdata('results_reducedConductance/eq_dF0_rep1/neuron_PN1_LS_sk_419138_0.dat');

plot(pnvm2)
hold on

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-60,-35], 'Color','k')
end



% Now I will edit the synapse .mod file in neuroConsturct and regenerate
% the hoc files for this simulation. I will reduce conductance to 1/5000th

%copy these new files to the current directory



% Copy the contents of the generatedNEURON dir to condInvest
system('cp -a ../../generatedNEURON/. ./')

%Compile mod files in this Dir
system('nrnivmodl')

%run hocEdsv2 on the hoc file
hocEdCmd=['python ../../../hocEdsv2.py ',PN,'_allORNs.hoc ', PN,'_allORNs'];
system(hocEdCmd)

%replace /home/william paths to /home/simulation
system(['sed -i -e ''s#\/home\/william\/#\/home\/simulation\/#'' ', PN,'_allORNs.hoc'])

%Set initial Vm
initVm=-59.4; %in mv
runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ', PN,'_allORNs.hoc'];
system(runVCmd)

%Setsim duration
runTime=200; %in ms
runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN,'_allORNs.hoc'];
system(runTCmd)

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '_TEST.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);


% Change the simReference = line in the hoc file and simsDir
simName='condInvest';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i+1)];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['cp ',hocCpName,' ',resultDir,'/'])

%import result vector
pnvm3=importdata('results_reducedConductance/eq_dF0_rep2/neuron_PN1_LS_sk_419138_0.dat');

plot(pnvm3)
hold on


% moved the recording electrode manually


% Change the simReference = line in the hoc file and simsDir
simName='condInvest';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i+1),'_local'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['cp ',hocCpName,' ',resultDir,'/'])

%import result vector
pnvm4=importdata('results_reducedConductance/eq_dF0_rep2_local/neuron_PN1_LS_sk_419138_0.dat');

plot(pnvm4)
hold on

figure()
set(gcf, 'Color', 'w')
subplot(2,1,1)
plot(pnvm1)
hold on
plot(pnvm2)

spikes=[];
for s=1:numel(ipsiORNs)
    if isempty(spikeTimes{s})==1
    else 
    spikes=[spikes,spikeTimes{s}];
    end
end

% figure()
% ylim([0 3])
% xlim([0 200])

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-60,-30], 'Color','k')
end

subplot(2,1,2)
plot(pnvm3)
hold on
plot(pnvm4)

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-59.4,-59.34], 'Color','k')
end

legend({'somatic signal','dendritic signal', 'Spikes'})




% Now I will edit the synapse .mod file in neuroConsturct and regenerate
% the hoc files for this simulation. I will increase conductance 100 fold

%copy these new files to the current directory



% Copy the contents of the generatedNEURON dir to condInvest
system('cp -a ../../generatedNEURON/. ./')

%Compile mod files in this Dir
system('nrnivmodl')

%run hocEdsv2 on the hoc file
hocEdCmd=['python ../../../hocEdsv2.py ',PN,'_allORNs.hoc ', PN,'_allORNs'];
system(hocEdCmd)

%replace /home/william paths to /home/simulation
system(['sed -i -e ''s#\/home\/william\/#\/home\/simulation\/#'' ', PN,'_allORNs.hoc'])

%Set initial Vm
initVm=-59.4; %in mv
runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ', PN,'_allORNs.hoc'];
system(runVCmd)

%Setsim duration
runTime=200; %in ms
runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN,'_allORNs.hoc'];
system(runTCmd)

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '_TEST.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);


% Change the simReference = line in the hoc file and simsDir
simName='condInvest';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i+2)];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['cp ',hocCpName,' ',resultDir,'/'])

%import result vector
pnvm5=importdata('results_reducedConductance/eq_dF0_rep3/neuron_PN1_LS_sk_419138_0.dat');

plot(pnvm5)
hold on


% moved the recording electrode manually



%Set the name of the directory to which the results will be saved *DO BY
%HAND
resultDir=['results_reducedConductance/eq_dF',num2str(dF),'_rep',num2str(i+2),'_local'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);


%Save the spikeTimes arrays and trial hoc file to result results dir
save([resultDir,'/spikeTimes.mat'],'spikeTimes')
system(['cp ',hocCpName,' ',resultDir,'/'])

%import result vector
pnvm6=importdata('results_reducedConductance/eq_dF0_rep3_local/neuron_PN1_LS_sk_419138_0.dat');

plot(pnvm6)
hold on

figure()
set(gcf, 'Color', 'w')
subplot(2,1,1)
plot(pnvm5)
hold on
plot(pnvm6)

spikes=[];
for s=1:numel(ipsiORNs)
    if isempty(spikeTimes{s})==1
    else 
    spikes=[spikes,spikeTimes{s}];
    end
end

% figure()
% ylim([0 3])
% xlim([0 200])

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-60,0], 'Color','k')
end

subplot(2,1,2)
plot(pnvm3)
hold on
plot(pnvm4)

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-59.4,-59.34], 'Color','k')
end

legend({'somatic signal','dendritic signal', 'Spikes'})
    

figure()
set(gcf, 'Color', 'w')

plot((pnvm6+59.4)/(max(pnvm6+59.4)))
hold on
plot((pnvm4+59.4)/(max(pnvm4+59.4)))

for r=1:numel(spikes)
    line([spikes(r)*40, spikes(r)*40], [-.01,1.01], 'Color','k')
end


legend({'100X gmax default', '1/5000 gmax default','spikes'})
title('Baseline subtracted dendritic signals normalized to max Vm')
