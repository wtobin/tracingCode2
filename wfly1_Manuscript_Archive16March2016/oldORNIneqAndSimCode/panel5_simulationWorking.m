
%% The goal of the following code is to run a simulation in which 2:25 ipsi ORNs are selected
% at random and driven with a poisson spike train. The CV of spike
% counts will be calculated. Additionally, the time-averaged CV of our modeled PN
%response will also be calculated. Finally, I will give all of these ORNs
%the same number of contacts and recalculate the PN response CV

%% Load annotations

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
%
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing
% ORNs_Left(find(ORNs_Left == 593865))=[];

ORNs=[ORNs_Left, ORNs_Right];

%% File handling

% I want to make a copy of each nC_projects PN directory

PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};

for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs directory within the nC_Projects dir
    % Path structure for my Ubuntu machine
    cd('/home/william/nC_projects/');
    
    % First things first, I need to make a copy of the current generatedNEURON
    % directory. This is where we will be working
    
    copyFileCommand = ['cp -R ', PN, ' ',[PN,'_poissSim']];
    
    system(copyFileCommand);
    
    mkdir(['./',[PN,'_poissSim/spikeVectors']]);
    
end

% I want to run Wei's script to copy/compile VecEvent.mod in each
% PN_poissSim/generatedNEURON dir. Also run hocEdsv_WTMod.py on each PN.hoc
% file


for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs poissSim/generatedNEURON dir
    cd(['/home/william/nC_projects/',PN,'_poissSim/generatedNEURON']);
    
    % copy vecEvent.mod to the cur dir and compile it
    vecEventcmd='bash ../../copy_comp.sh';
    system(vecEventcmd);
    
    %run hocEdsv_WTMod.py on the PN.hoc file in the cur dir. NOTE: What is
    %needed here is a modified hocED file that allows definition of the
    %path to spikeVectors dir and simRef
    
    hocModcmd=['python ../../hocEdsv2.py ', PN ,'.hoc ', PN, '_poissSim'];
    system(hocModcmd)
    
    % Change the simReference = line in the hoc file and simsDir
    simName='poissSim';
    simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',PN, '.hoc '];
    system(simRefCmd)
    
    simDir=['/home/william/nC_projects/',PN,'_poissSim/simulations/'];
    simRefCmd=['sed -i -e ''s#simsDir\s\=\s\".*\"#simsDir \= \"',simDir,'\"#'' ',PN, '.hoc '];
    system(simRefCmd)
    
    %Set initial Vm
    initVm=-59.4; %in mv
    runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ',PN, '.hoc '];
    system(runVCmd)
    
    
     %Setsim duration
    runTime=500; %in ms
    runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN, '.hoc '];
    system(runTCmd)
    
    % Copy the contents of the generated NEURON folder into the poissSim dir
    mkdir(['/home/william/nC_projects/',PN,'_poissSim/simulations/poissSim']);
    cpCmd=['cp -a /home/william/nC_projects/',PN,'_poissSim/generatedNEURON/. /home/william/nC_projects/',PN,'_poissSim/simulations/poissSim/'];
    system(cpCmd);
    
end

%% Simulation


% We want to run this simulation for all PNs

for p=1:length(PN_Names)
    
    PN=cell2mat(PN_Names(p));
    cd(['/home/william/nC_projects/',PN,'_poissSim/simulations/poissSim/'])
    
    
    
    %find the total number of synapses
    grepCommand=['grep -oP ''\[\d*\].ropen\("/home/william/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
    [status, totSynapseNums]=system(grepCommand);
    totSynapseNums=str2num(totSynapseNums);
    
    
    %The number of ORNs activated in these simulations will range from 2 to 25
    for ornNum=2:4
        tic
        
        % We want to run the simulation # times for each orn Num
        
        for rep=1:20
            
            %initilize array to hold the synapse numbers activated in this
            %sim. It will be a 2d array in which one column hold synapse
            %numbers and the other holds a number which identifies the ORN
            %the syn came from
            PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};
            
            activeSyns=[];
            activeSyns_eq=[];
            
            
            % pick ORNs at random, from the ipsi ORN pool
            
            if strcmp(PN, 'PN1RS') == 1 || strcmp(PN,'PN2RS') == 1 %For Right PNs
                
                selectionR=randsample(length(ORNs_Right),ornNum);
                skelIDsR=ORNs_Right(selectionR);
                
                
                %Search the simulation hoc file and return the synapse numbers
                %associated with each of these ORNs
                counter =1;
                
                for ro=1:length(skelIDsR)
                    
                    grepCommand=['grep -oP ''', num2str(skelIDsR(ro)),'\[\d*\].ropen\("/home/william/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
                    %         [status, synapseNumsR{ro}]=system(grepCommand);
                    %         synapseNumsR{ro}=unique(str2num(synapseNumsR{ro}));
                    [status, synsW]=system(grepCommand);
                    synsW=str2num(synsW);
                    activeSyns=[activeSyns; [synsW,counter*ones(numel(synsW),1)]];
                    counter=counter+1;
                    synsW=[];
                    
                end
                
            else % For L PNs
                
                selectionL=randsample(length(ORNs_Right),ornNum);
                skelIDsL=ORNs_Right(selectionL);
                
                
                %Search the simulation hoc file and return the synapse numbers
                %associated with each of these ORNs
                
                counter=1;
                
                for lo=1:length(skelIDsL)
                    
                    grepCommand=['grep -oP ''', num2str(skelIDsL(lo)),'\[\d*\].ropen\("/home/william/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
                    %         [status, synapseNumsL{lo}]=system(grepCommand);
                    %         synapseNumsL{lo}=unique(str2num(synapseNumsL{lo}));
                    
                    [status, synsW]=system(grepCommand);
                    synsW=str2num(synsW);
                    activeSyns=[activeSyns; [synsW,counter*ones(numel(synsW),1)]];
                    counter=counter+1;
                    synsW=[];
                    
                end
                
            end
            
         
            %Generate poisson spike trains for each ORN and turn them into
            %a list of spike times
            for o=1:ornNum
                % sim time -10ms used to allow the mem pot to settle
                spikeTrains(o,:)=makeSpikes(.001,2,.49); 
                spikeTimes{o}=find(spikeTrains(o,:)==1); 
                
            end
            
            %spikeTrain storage
            storedSTs{p,ornNum}(rep,:,:)=spikeTrains;
           
            
           
            
            %Save a file for every synapse in the simulation. The files associated
            %with the selected ORNs should contain the above calculated spike times
            %while all other files are blank
            
            
                
               % Save spike vector files for all synapses on this PN with a single
               % spike at the synapses from selected ORNs
                
                for f=1:numel(totSynapseNums)
                    
                    s=totSynapseNums(f);
                    
                    if ismember(s,activeSyns(:,1))
                        
                       %should return spike time list for orn which owns the current active syn
                       % Also I am adding 50 to all these values to offset
                       % them from the start of the sim, allowing for the
                       % mem pot to settle
                       
                       
                       % If there are no spikes, dont try to write the
                       % empty spikeTimes array, it snarls nrn. [] seems to
                       % do fine?
                       
                       if isempty(spikeTimes{activeSyns(find(activeSyns(:,1) == s),2)}) == 1
                           
                        vector=[];
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')  
                        
                       else
                           
                        vector=spikeTimes{activeSyns(find(activeSyns(:,1) == s),2)}+10; 
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                        
                       end
                       
                    else
                        
                        vector=[];
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                        
                    end
                end
            
            %I want to run the simulation
            
                runCmd=['nrniv ', PN, '.hoc'];
                system(runCmd);
            
            
            %I want to import the PNs simulated voltage trace
            
            %find its name
                pnResults=dir('neuron_PN*.dat');
                
                pnVm1=importdata(pnResults.name);
                
                %PN voltage storage
                 storedVms{p,ornNum}(1,rep,:)=pnVm1;
                
            
            %Store the average PN mem pot over the firing period and the
            %total spike count
            
            outcomes(ornNum, rep,1)=sum(spikeTrains(:));
            %mean deviation from baseline (-59.4mv)
            outcomes(ornNum, rep,2)=mean(pnVm1(400:end)+59.4);
            
            % now I want to give all ORNs the same number of synapses, I
            % will do this by finding the ORN w/ the least synapses from my
            % selection and only using that number of contacts in all other
            % ORNs
            
            % give ORNs an equal number of synapses
            
            numCont=round(numel(activeSyns(:,1))/ornNum); % num contacts each ORN is going to get
                
            % pull synapse IDs uniformly at random from the total list and
            % assign them equally to all active ORNs

            pulledContacts=totSynapseNums(randsample(length(totSynapseNums),numCont*ornNum));
            
            for i=1:ornNum
 
               activeSyns_eq(i*numCont-(numCont-1):i*numCont,:)=...
                   [pulledContacts(i*numCont-(numCont-1):i*numCont),i*ones(numCont,1)];
  
            end
            
            % Save spike vector files for all synapses on this PN with
            % spike trains given to synapses in activeSyns_eq according to
            % ORN identity
                
                for f=1:numel(totSynapseNums)
                    
                    s=totSynapseNums(f);
                    
                    if ismember(s,activeSyns_eq(:,1))
                        
                       %should return spike time list for orn which owns the current active syn
                       % Also I am adding 50 to all these values to offset
                       % them from the start of the sim, allowing for the
                       % mem pot to settle
                       
                       
                       % If there are no spikes, dont try to write the
                       % empty spikeTimes array, it snarls nrn. [] seems to
                       % do fine?
                       
                       if isempty(spikeTimes{activeSyns_eq(find(activeSyns_eq(:,1) == s),2)}) == 1
                           
                        vector=[];
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')  
                        
                       else
                           
                        vector=spikeTimes{activeSyns_eq(find(activeSyns_eq(:,1) == s),2)}+10; 
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                        
                       end
                       
                    else
                        
                        vector=[];
                        save(['~/nC_projects/',PN,'_poissSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                        
                    end
                end
                
            
                
            %I want to run the simulation
            
                runCmd=['nrniv ', PN, '.hoc'];
                system(runCmd);
            
            
            %I want to import the PNs simulated voltage trace
            
            %find its name
                pnResults=dir('neuron_PN*.dat');
                pnVm2=importdata(pnResults.name);
                
                  %PN voltage storage
                 storedVms{p,ornNum}(2,rep,:)=pnVm2;
            
            %Store the average PN mem pot over the firing period and the
            %total spike count
            
            outcomes_eq(ornNum,rep,1)=sum(spikeTrains(:));
            outcomes_eq(ornNum, rep,2)=mean(pnVm2(400:end+59.5));
            
                
                
            %Clear the spike trains/times variables
            clear spikeTrains
            clear spikeTimes
            
           
            
        end
         toc
    end
    
    
end