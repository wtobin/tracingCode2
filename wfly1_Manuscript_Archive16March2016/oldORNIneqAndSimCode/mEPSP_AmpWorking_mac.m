%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('/Users/williamtobin/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
% 
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing 
% ORNs_Left(find(ORNs_Left == 593865))=[];

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=annotations.PN;

%return all LN skel IDs
LNs=annotations.LN;
LNs=[LNs, annotations.potential_0x20_LN];
LNs=[LNs, annotations.Prospective_0x20_LN];
LNs=[LNs, annotations.Likely_0x20_LN];


%Load the connector structure
load('/Users/williamtobin/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);

%% Collect simulation results for PN1LS

baseProjDir='/Users/williamtobin/Documents/MATLAB/tracingCode2/wfly1_Manuscript/nC_projects/';

pn1LS_Vm=importdata(strcat(baseProjDir, 'PN1LS/simulations/Sim_8/neuron_PN1_LS_sk_419138_0.dat'));
pn1LS_simTime=importdata(strcat(baseProjDir,'PN1LS/simulations/Sim_8/time.dat'));

%collect ORN skel IDs from PN1LS hoc file, one for every synapse,  and save them in a txt file
idCommand=['/usr/local/bin/grep -Po ''(?<=^synapse_)\d*'' ',baseProjDir,  ...
    'PN1LS/generatedNEURON/PN1LS.hoc > ', baseProjDir,  'PN1LS/generatedNEURON/synapseIDs.txt '];

system(idCommand);

synIDs=importdata([baseProjDir, 'PN1LS/generatedNEURON/synapseIDs.txt']);

fireTimeCmd=['/usr/local/bin/grep -Po ''((?<=.start = )\d*)'' ', baseProjDir,...
    'PN1LS/generatedNEURON/PN1LS.hoc > ',baseProjDir, 'PN1LS/generatedNEURON/synapseSpikeTimes.txt'];

system(fireTimeCmd);

fireTimes=importdata([ baseProjDir, 'PN1LS/generatedNEURON/synapseSpikeTimes.txt']);


%% Collect mEPSPs in a arrays for L and R ORNs this array is a cell mEPSP{PN#,ORN#} containing
% simulated Vm traces [mini,voltage values]

ornIDs=unique(synIDs);


for o=1:length(ornIDs)
    
    if ismember(ornIDs(o),ORNs_Left) == 1
        
        miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        leftmEPSPs{1,find(ORNs_Left==ornIDs(o))}(s,:)= pn1LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    elseif ismember(synIDs(o),ORNs_Right) == 1
        
       miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        rightmEPSPs{1,find(ORNs_Right==ornIDs(o))}(s,:)= pn1LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    end
end


%% Collect simulation results for PN2LS

baseProjDir='/Users/williamtobin/Documents/MATLAB/tracingCode2/wfly1_Manuscript/nC_projects/';

pn2LS_Vm=importdata(strcat(baseProjDir, 'PN2LS/simulations/Sim_5/neuron_PN2_LS_sk_427345_0.dat'));
pn2LS_simTime=importdata(strcat(baseProjDir,'PN2LS/simulations/Sim_5/time.dat'));

%collect ORN skel IDs from PN2LS hoc file, one for every synapse,  and save them in a txt file
idCommand=['/usr/local/bin/grep -Po ''(?<=^synapse_)\d*'' ',baseProjDir,  ...
    'PN2LS/generatedNEURON/PN2LS.hoc > ', baseProjDir,  'PN2LS/generatedNEURON/synapseIDs.txt '];

system(idCommand);

synIDs=importdata([baseProjDir, 'PN2LS/generatedNEURON/synapseIDs.txt']);

fireTimeCmd=['/usr/local/bin/grep -Po ''((?<=.start = )\d*)'' ', baseProjDir,...
    'PN2LS/generatedNEURON/PN2LS.hoc > ',baseProjDir, 'PN2LS/generatedNEURON/synapseSpikeTimes.txt'];

system(fireTimeCmd);

fireTimes=importdata([ baseProjDir, 'PN2LS/generatedNEURON/synapseSpikeTimes.txt']);


%% Collect mEPSPs in a arrays for L and R ORNs this array is a cell mEPSP{PN#,ORN#} containing
% simulated Vm traces [mini,voltage values]

ornIDs=unique(synIDs);


for o=1:length(ornIDs)
    
    if ismember(ornIDs(o),ORNs_Left) == 1
        
        miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        leftmEPSPs{2,find(ORNs_Left==ornIDs(o))}(s,:)= pn2LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    elseif ismember(synIDs(o),ORNs_Right) == 1
        
       miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        rightmEPSPs{2,find(ORNs_Right==ornIDs(o))}(s,:)= pn2LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    end
end


%% Collect simulation results for PN3LS

baseProjDir='/Users/williamtobin/Documents/MATLAB/tracingCode2/wfly1_Manuscript/nC_projects/';

pn3LS_Vm=importdata(strcat(baseProjDir, 'PN3LS/simulations/Sim_6/neuron_PN3_LS_sk_668267_0.dat'));
pn3LS_simTime=importdata(strcat(baseProjDir,'PN3LS/simulations/Sim_6/time.dat'));

%collect ORN skel IDs from PN3LS hoc file, one for every synapse,  and save them in a txt file
idCommand=['/usr/local/bin/grep -Po ''(?<=^synapse_)\d*'' ',baseProjDir,  ...
    'PN3LS/generatedNEURON/PN3LS.hoc > ', baseProjDir,  'PN3LS/generatedNEURON/synapseIDs.txt '];

system(idCommand);

synIDs=importdata([baseProjDir, 'PN3LS/generatedNEURON/synapseIDs.txt']);

fireTimeCmd=['/usr/local/bin/grep -Po ''((?<=.start = )\d*)'' ', baseProjDir,...
    'PN3LS/generatedNEURON/PN3LS.hoc > ',baseProjDir, 'PN3LS/generatedNEURON/synapseSpikeTimes.txt'];

system(fireTimeCmd);

fireTimes=importdata([ baseProjDir, 'PN3LS/generatedNEURON/synapseSpikeTimes.txt']);


%% Collect mEPSPs in a arrays for L and R ORNs this array is a cell mEPSP{PN#,ORN#} containing
% simulated Vm traces [mini,voltage values]

ornIDs=unique(synIDs);


for o=1:length(ornIDs)
    
    if ismember(ornIDs(o),ORNs_Left) == 1
        
        miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        leftmEPSPs{3,find(ORNs_Left==ornIDs(o))}(s,:)= pn3LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    elseif ismember(synIDs(o),ORNs_Right) == 1
        
       miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        rightmEPSPs{3,find(ORNs_Right==ornIDs(o))}(s,:)= pn3LS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    end
end


%% Collect simulation results for PN1LS

baseProjDir='/Users/williamtobin/Documents/MATLAB/tracingCode2/wfly1_Manuscript/nC_projects/';

pn1RS_Vm=importdata(strcat(baseProjDir, 'PN1RS/simulations/Sim_5/neuron_PN1_RS_sk_638603_0.dat'));
pn1RS_simTime=importdata(strcat(baseProjDir,'PN1RS/simulations/Sim_5/time.dat'));

%collect ORN skel IDs from PN1LS hoc file, one for every synapse,  and save them in a txt file
idCommand=['/usr/local/bin/grep -Po ''(?<=^synapse_)\d*'' ',baseProjDir,  ...
    'PN1RS/generatedNEURON/PN1RS.hoc > ', baseProjDir,  'PN1RS/generatedNEURON/synapseIDs.txt '];

system(idCommand);

synIDs=importdata([baseProjDir, 'PN1RS/generatedNEURON/synapseIDs.txt']);

fireTimeCmd=['/usr/local/bin/grep -Po ''((?<=.start = )\d*)'' ', baseProjDir,...
    'PN1RS/generatedNEURON/PN1RS.hoc > ',baseProjDir, 'PN1RS/generatedNEURON/synapseSpikeTimes.txt'];

system(fireTimeCmd);

fireTimes=importdata([ baseProjDir, 'PN1RS/generatedNEURON/synapseSpikeTimes.txt']);


%% Collect mEPSPs in a arrays for L and R ORNs this array is a cell mEPSP{PN#,ORN#} containing
% simulated Vm traces [mini,voltage values]

ornIDs=unique(synIDs);


for o=1:length(ornIDs)
    
    if ismember(ornIDs(o),ORNs_Left) == 1
        
        miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        leftmEPSPs{4,find(ORNs_Left==ornIDs(o))}(s,:)= pn1RS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    elseif ismember(synIDs(o),ORNs_Right) == 1
        
       miniInds=find(synIDs==ornIDs(o));
        
        for s=1:length(miniInds)
        
        rightmEPSPs{4,find(ORNs_Right==ornIDs(o))}(s,:)= pn1RS_Vm(10*fireTimes(miniInds(s))-40 ...
        :10*fireTimes(miniInds(s))+1000);
       
        end
        
    end
end
