%This file will contain code to generate plots for my data lab meeting on
%8/24/15
%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
% 
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing 
% ORNs_Left(find(ORNs_Left == 593865))=[];

%return all skeleton IDs of DM6 PNs
PNs=annotations.PN;

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);


%% ORN outputs in DM6 Hist of number of ORN output synapses 

% Loop over L ORNs
for o=1:length(ORNs_Left)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if conns.(cell2mat(connFields(i))).pre == ORNs_Left(o)


                synCounter=synCounter+1;
                
          
        else
        end
    end
end

sumLeftORNOuts(o)=synCounter;

end


% Loop over R ORNs
for o=1:length(ORNs_Right)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if conns.(cell2mat(connFields(i))).pre == ORNs_Right(o)


                synCounter=synCounter+1;
                
          
        else
        end
    end
end

sumRightORNOuts(o)=synCounter;

end

figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(sumLeftORNOuts, 20)
xlabel('Num Output Synapses')
ylabel('Freq')
title('Left ORNs')
xlim([40 110])
ylim([0 6])
meanOutL=['Mean: ', num2str(mean(sumLeftORNOuts))];
stdOutL=['std: ', num2str(std(sumLeftORNOuts))];
cvOutL=['CV: ', num2str(std(sumLeftORNOuts)/mean(sumLeftORNOuts))];
text(45,5.5,meanOutL)
text(45,5.25,stdOutL)
text(45,5,cvOutL)


subplot(1,2,2)
hist(sumRightORNOuts, 20)
xlabel('Num Output Synapses')
ylabel('Freq')
title('Right ORNs')
xlim([40 110])
ylim([0 6])
meanOutR=['Mean: ', num2str(mean(sumRightORNOuts))];
stdOutR=['std: ', num2str(std(sumRightORNOuts))];
cvOutR=['CV: ', num2str(std(sumRightORNOuts)/mean(sumRightORNOuts))];
text(45,5.5,meanOutR)
text(45,5.25,stdOutR)
text(45,5,cvOutR)





%% Is this distribution more or less uniform than one generated by randomly assigning synapses to ORNs?

%run the simulation 10000 times

for r=1:1000
   
    % assign each Left ORN output synapse to one of the 25 Left ORNs at
    % random
    
  for s=1:sum(sumLeftORNOuts)
      assignmentL(s)=randi(length(ORNs_Left));
  end
    
      
   % Do the same for Right ORNs
   
  for s=1:sum(sumRightORNOuts)
      assignmentR(s)=randi(length(ORNs_Right));
  end
  
  
  %Count the number of output synapses assigned to each L ORN
  
  for o=1:length(ORNs_Left)
      randSumOutsL(r,o)=numel(find(assignmentL==o));
  end
  
  %Do the same for R ORNs
  
   for o=1:length(ORNs_Right)
      randSumOutsR(r,o)=numel(find(assignmentR==o));
   end
  
  
  %Calculate the rand dist std for each reptition
  stdL(r)=std(randSumOutsL(r,:));
  stdR(r)=std(randSumOutsR(r,:));
  
  %Calculate the rand dist range for each reptition
  rangeL(r)=range(randSumOutsL(r,:));
  rangeR(r)=range(randSumOutsR(r,:));
  
  
end
  
  
  
figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(stdL,75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Left ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumLeftORNOuts) std(sumLeftORNOuts)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdL>=std(sumLeftORNOuts))/r)])


subplot(2,2,2)
hist(stdR, 75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Right ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumRightORNOuts) std(sumRightORNOuts)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdR>=std(sumRightORNOuts))/r)])
  
  
  
subplot(2,2,3)
hist(rangeL, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumLeftORNOuts) range(sumLeftORNOuts)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeL>=range(sumLeftORNOuts))/r)])


subplot(2,2,4)
hist(rangeR, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumRightORNOuts) range(sumRightORNOuts)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeR>=range(sumRightORNOuts))/r)])


%What if I exclude the smallest ORN from both L and R populations? 
% Not significant


sumLOuts_exMin=sumLeftORNOuts;
sumLOuts_exMin(find(sumLOuts_exMin==min(sumLOuts_exMin)))=[]; 

sumROuts_exMin=sumRightORNOuts;
sumROuts_exMin(find(sumROuts_exMin==min(sumROuts_exMin)))=[]; 

for r=1:1000
   r
    % assign each Left ORN output synapse to one of the 25 Left ORNs at
    % random
    
  for s=1:sum(sumLOuts_exMin)
      assignmentL(s)=randi(length(ORNs_Left)-1);
  end
    
      
   % Do the same for Right ORNs
   
  for s=1:sum(sumROuts_exMin)
      assignmentR(s)=randi(length(ORNs_Right)-1);
  end
  
  
  %Count the number of output synapses assigned to each L ORN
  
  for o=1:length(ORNs_Left)-1
      randSumOutsL(r,o)=numel(find(assignmentL==o));
  end
  
  %Do the same for R ORNs
  
   for o=1:length(ORNs_Right)-1
      randSumOutsR(r,o)=numel(find(assignmentR==o));
   end
  
  
  %Calculate the rand dist std for each reptition
  stdL_exMin(r)=std(randSumOutsL(r,:));
  stdR_exMin(r)=std(randSumOutsR(r,:));
  
  %Calculate the rand dist range for each reptition
  rangeL_exMin(r)=range(randSumOutsL(r,:));
  rangeR_exMin(r)=range(randSumOutsR(r,:));
  
  
end


figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(stdL_exMin,75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Left ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumLOuts_exMin) std(sumLOuts_exMin)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdL_exMin>=std(sumLOuts_exMin))/r)])


subplot(2,2,2)
hist(stdR_exMin, 75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Right ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumROuts_exMin) std(sumROuts_exMin)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdR_exMin>=std(sumROuts_exMin))/r)])
  
  
  
subplot(2,2,3)
hist(rangeL_exMin, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumLOuts_exMin) range(sumLOuts_exMin)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeL_exMin>=range(sumLOuts_exMin))/r)])


subplot(2,2,4)
hist(rangeR_exMin, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumROuts_exMin) range(sumROuts_exMin)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeR_exMin>=range(sumROuts_exMin))/r)])

%% How Divergent are ORN Output synapses?


% Loop over L ORNs
for o=1:length(ORNs_Left)
    
   
   synCounter=1;
    
    %loop over all connectors
    for i= 1 : length(connFields)
        
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Left(o)
                 numPostL{o}(synCounter)=length(conns.(cell2mat(connFields(i))).post);
                 synCounter=synCounter+1;
           
              
            else
                
            end
        end
        
    end
    

end


% Loop over L ORNs
for o=1:length(ORNs_Right)
    
   
   synCounter=1;
    
    %loop over all connectors
    for i= 1 : length(connFields)
        
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Right(o)
                 numPostR{o}(synCounter)=length(conns.(cell2mat(connFields(i))).post);
                 synCounter=synCounter+1;
           
              
            else
                
            end
        end
        
    end
    

end

sumDivL=[];
sumDivR=[];

for j=1:25
    sumDivL=[sumDivL numPostL{o}];
    sumDivR=[sumDivR numPostR{o}];
    
    meanDivL(j)=mean(numPostL{j});
    meanDivR(j)=mean(numPostR{j});
end

% Create a histogram of the number of profiles postsynaptic to orn output
% sites

figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(sumDivL, 20)
xlabel('Num Post-Synaptic Profiles')
ylabel('Freq')
title('Left ORNs')
xlim([0 10])


subplot(1,2,2)
hist(sumDivR, 20)
xlabel('Num Post-Synaptic Profiles')
ylabel('Freq')
title('Right ORNs')
xlim([0 10])

%pool all ORNs
figure()
set(gcf, 'color', 'w')


hist([sumDivL,sumDivR], 30)
xlabel('Num Postsynaptic Profiles','FontSize', 18)
ylabel('Freq','FontSize', 18)
title('DM6 ORNs', 'FontSize', 18)
set(gca,'FontSize', 18)
ax=gca;
ax.XTick=[0:1:10];
xlim([0 10])



%histogram the mean number of postsynaptic profiles for each ORN

figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(meanDivL, 20)
xlabel('Mean Num Post Profs')
ylabel('Freq')
title('Left ORNs')
xlim([2 5])
ylim([0 5])
meanMeanDivL=['Mean: ', num2str(mean(meanDivL))];
stdMeanDivL=['std: ', num2str(std(meanDivL))];
cvMeanDivL=['CV: ', num2str(std(meanDivL)/mean(meanDivL))];
text(2.25,4.5,meanMeanDivL)
text(2.25,4.25,stdMeanDivL)
text(2.25,4,cvMeanDivL)

subplot(1,2,2)
hist(meanDivR, 20)
xlabel('Mean Num Post Profs')
ylabel('Freq')
title('Right ORNs')
xlim([2 5])
ylim([0 5])
meanMeanDivR=['Mean: ', num2str(mean(meanDivR))];
stdMeanDivR=['std: ', num2str(std(meanDivR))];
cvMeanDivR=['CV: ', num2str(std(meanDivR)/mean(meanDivR))];
text(2.25,4.5,meanMeanDivR)
text(2.25,4.25,stdMeanDivR)
text(2.25,4,cvMeanDivR)

%% What fraction of profiles post-synaptic to ORNs are PNs?

counter=1;

% Loop over L ORNs
for o=1:length(ORNs_Left)
    
    numPost=0;
    pnCounter=1;
    
    %loop over all connectors
    for i= 1 : length(connFields)
       
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Left(o)
                numPost=numPost+length(conns.(cell2mat(connFields(i))).post);
                
                
                for j=1:length(conns.(cell2mat(connFields(i))).post)
                    
                    if ismember(conns.(cell2mat(connFields(i))).post(j), PNs)== 1
                        
                        postPN(pnCounter)=find(PNs == conns.(cell2mat(connFields(i))).post(j));
                        pnCounter=pnCounter+1;
                        
                        
                    end
                end
            else
                
            end
        end
        
        
        
    end
    
    totPostProfL(o)=numPost;
    
    for pn=1:5
        
        postPnProfL(o,pn)=length(find(postPN == pn));
        
    end
    clear postPN
    
end


% Loop over R ORNs
for o=1:length(ORNs_Right)
    
    numPost=0;
    pnCounter=1;
    
    %loop over all connectors
    for i= 1 : length(connFields)
       
        %Make sure the connector doesnt have an empty pre or post-synaptic field
        if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
            
        else
            
            %Check to see if the working skel is presynaptic at this connector
            if conns.(cell2mat(connFields(i))).pre == ORNs_Right(o)
                numPost=numPost+length(conns.(cell2mat(connFields(i))).post);
                
                
                for j=1:length(conns.(cell2mat(connFields(i))).post)
                    
                    if ismember(conns.(cell2mat(connFields(i))).post(j), PNs)== 1
                        
                        postPN(pnCounter)=find(PNs == conns.(cell2mat(connFields(i))).post(j));
                        pnCounter=pnCounter+1;
                        
                        
                    end
                end
            else
                
            end
        end
        
        
        
    end
    
    totPostProfR(o)=numPost;
    
    for pn=1:5
        
        postPnProfR(o,pn)=length(find(postPN == pn));
    end
    
clear postPN    
end


% Look at histogram of totPostProf


figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(totPostProfL, 20)
xlabel('Num Postsynaptic Targets')
ylabel('Freq')
title('Left ORNs')
xlim([100 400])
 ylim([0 4])
meanOutL=['Mean: ', num2str(mean(totPostProfL))];
stdOutL=['std: ', num2str(std(totPostProfL))];
cvOutL=['CV: ', num2str(std(totPostProfL)/mean(totPostProfL))];
text(150,3.5,meanOutL)
text(150,3.25,stdOutL)
text(150,3,cvOutL)


subplot(1,2,2)
hist(totPostProfR, 20)
xlabel('Num Postsynaptic Targets')
ylabel('Freq')
title('Right ORNs')
xlim([100 400])
ylim([0 4])
meanOutR=['Mean: ', num2str(mean(totPostProfR))];
stdOutR=['std: ', num2str(std(totPostProfR))];
cvOutR=['CV: ', num2str(std(totPostProfR)/mean(totPostProfR))];
text(150,3.5,meanOutR)
text(150,3.25,stdOutR)
text(150,3,cvOutR)


%As a sanity check, look at the relationship between ORN output site # and
% total post profiles
figure()
set(gcf, 'color', 'w')
p=polyfit(sumLeftORNOuts,totPostProfL,1)
subplot(1,2,1)
scatter(sumLeftORNOuts,totPostProfL, 'filled')
refline(p(1), p(2))
xlim([40 150])
ylim([160 380])
text(42, 360, 'y=3.57x+7.63')
title('Left ORNs')
xlabel('Num Presynaptic Sites')
ylabel('Num Post Profiles')

p=polyfit(sumRightORNOuts,totPostProfR,1)
subplot(1,2,2)
scatter(sumRightORNOuts,totPostProfR, 'filled')
refline(p(1), p(2))
xlim([40 150])
ylim([160 380])
text(100, 240, 'y=3.23x+32.7')
title('Right ORNs')
xlabel('Num Presynaptic Sites')
ylabel('Num Post Profiles')

% generate historams of the number of PN profiles postsynaptic to right and
% left ORNs
figure()
set(gcf, 'color', 'w')
titles={'PN3 LS', 'PN2 LS', 'PN1 RS', 'PN2 RS', 'PN1 LS'};

for j=1:5
    subplot(2,3,j)
    hist(postPnProfL(:,j))
    xlim([0 40])
    ylim([0 7.5])
    
meanPNPostL=['Mean: ', num2str(mean(postPnProfL(:,j)))];
stdPNPostL=['std: ', num2str(std(postPnProfL(:,j)))];
cvPNPostL=['CV: ', num2str(std(postPnProfL(:,j))/mean(postPnProfL(:,j)))];
text(1,6.5,meanPNPostL)
text(1,6,stdPNPostL)
text(1,5.5,cvPNPostL)
title(titles(j))
    
end

figure()
set(gcf, 'color', 'w')
titles={'PN3 LS', 'PN2 LS', 'PN1 RS', 'PN2 RS', 'PN1 LS'};

for j=1:5
    subplot(2,3,j)
    hist(postPnProfR(:,j))
 xlim([0 60])
 ylim([0 7.5])
  set(gca,'XTick', [0:10:60])
meanPNPostR=['Mean: ', num2str(mean(postPnProfR(:,j)))];
stdPNPostR=['std: ', num2str(std(postPnProfR(:,j)))];
cvPNPostR=['CV: ', num2str(std(postPnProfR(:,j))/mean(postPnProfR(:,j)))];
 text(5,7,meanPNPostR)
 text(5,6.5,stdPNPostR)
 text(5,6,cvPNPostR)
title(titles(j))
    
end


%What fraction of postsynaptic profiles are ipsi and contra PNs

figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(sum(postPnProfL(:,[1,2,5])')./totPostProfL, 20)
xlabel('ipsi PN post/total post')
ylabel('Freq')
title('Left ORNs')
xlim([0 .5])
ylim([0 6.5])
meanFractIpsiL=['Mean: ', num2str(mean(sum(postPnProfL(:,[1,2,5])')./totPostProfL))];
stdFractIpsiL=['std: ', num2str(std(sum(postPnProfL(:,[1,2,5])')./totPostProfL))];
cvFractIpsiL=['CV: ', num2str(std(sum(postPnProfL(:,[1,2,5])')./totPostProfL)/mean(sum(postPnProfL(:,[1,2,5])')./totPostProfL))];
text(.3,6,meanFractIpsiL)
text(.3,5.5,stdFractIpsiL)
text(.3,5,cvFractIpsiL)


subplot(2,2,2)
hist(sum(postPnProfR(:,[3,4])')./totPostProfR, 20)
xlabel('ipsi PN post/total post')
ylabel('Freq')
title('Right ORNs')
xlim([0 .5]);ylim([0 6.5])
meanFractIpsiR=['Mean: ', num2str(mean(sum(postPnProfR(:,[3,4])')./totPostProfR))];
stdFractIpsiR=['std: ', num2str(std(sum(postPnProfR(:,[3,4])')./totPostProfR))];
cvFractIpsiR=['CV: ', num2str(std(sum(postPnProfR(:,[3,4])')./totPostProfR)/mean(sum(postPnProfR(:,[3,4])')./totPostProfR))];
text(.3,6,meanFractIpsiR)
text(.3,5.5,stdFractIpsiR)
text(.3,5,cvFractIpsiR)

subplot(2,2,3)
hist(sum(postPnProfL(:,[3,4])')./totPostProfL, 20)
xlabel('contra PN post/total post')
ylabel('Freq')
xlim([0 .5]);ylim([0 6.5])
meanFractContraL=['Mean: ', num2str(mean(sum(postPnProfL(:,[3,4])')./totPostProfL))];
stdFractContraL=['std: ', num2str(std(sum(postPnProfL(:,[3,4])')./totPostProfL))];
cvFractContraL=['CV: ', num2str(std(sum(postPnProfL(:,[3,4])')./totPostProfL)/mean(sum(postPnProfL(:,[3,4])')./totPostProfL))];
text(.3,6,meanFractContraL)
text(.3,5.5,stdFractContraL)
text(.3,5,cvFractContraL)


subplot(2,2,4)
hist(sum(postPnProfR(:,[1,2,5])')./totPostProfR, 20)
xlabel('contra PN post/total post')
ylabel('Freq');
xlim([0 .5]);ylim([0 6.5])
meanFractContraR=['Mean: ', num2str(mean(sum(postPnProfR(:,[1,2,5])')./totPostProfR))];
stdFractContraR=['std: ', num2str(std(sum(postPnProfR(:,[1,2,5])')./totPostProfR))];
cvFractContraR=['CV: ', num2str(std(sum(postPnProfR(:,[1,2,5])')./totPostProfR)/mean(sum(postPnProfR(:,[1,2,5])')./totPostProfR))];
text(.3,6,meanFractContraR)
text(.3,5.5,stdFractContraR)
text(.3,5,cvFractContraR)

% Generate the boxplot of ipsi vs. contra inputs to each PN

ipsi_OtoP_contacts(:,1:3)=postPnProfL(:,[5,2,1]);
ipsi_OtoP_contacts(:,4:5)=postPnProfR(:,[3,4]);

contra_OtoP_contacts(:,1:3)=postPnProfR(:,[5,2,1]);
contra_OtoP_contacts(:,4:5)=postPnProfL(:,[3,4]);


titles={'PN1 LS', 'PN2 LS', 'PN3 LS', 'PN1 RS', 'PN2 RS'};

for i=1:length(PNs)

    subplot(2,3,i)
%     boxplot([ipsi_OtoP_contacts(:,i),contra_OtoP_contacts(:,i)],[zeros(1,length(ipsi_OtoP_contacts(:,i))),ones(1,length(contra_OtoP_contacts(:,i)))], 'notch', 'on')
scatter([ones(length(ipsi_OtoP_contacts(:,i)),1);2*ones(length(contra_OtoP_contacts(:,i)),1)],[ipsi_OtoP_contacts(:,i);contra_OtoP_contacts(:,i)])
xlim([0 3])
ylim([0 50])
set(gca, 'XTick',[1:1:2])
line([.75 1.25],[mean(ipsi_OtoP_contacts(:,i)), mean(ipsi_OtoP_contacts(:,i))], 'color', 'k', 'LineWidth', 2)
line([1.75 2.25],[mean(contra_OtoP_contacts(:,i)), mean(contra_OtoP_contacts(:,i))], 'color', 'k', 'LineWidth', 2)
    set(gca,'XTickLabel',['Ipsi  ';'Contra'],'FontSize',18)
    
    if i == 1 || i==4
    ylabel('Num ORN Contacts', 'FontSize',18)
    else
    end
    title(titles(i), 'FontSize',18)
    set(gcf,'color','w');
    
end

% Generate the boxplot of ipsi vs. contra inputs to each PN

ipsi_OtoP=[sum(ipsi_OtoP_contacts(:,[1:3])'),sum(ipsi_OtoP_contacts(:,[4,5])')]
contra_OtoP=[sum(contra_OtoP_contacts(:,[1:3])'),sum(contra_OtoP_contacts(:,[4,5])')]

figure()
set(gcf,'color','w')
scatter(ipsi_OtoP,contra_OtoP,'filled')
xlabel('Ipsi PN Contacts', 'FontSize', 18)
ylabel('Contra PN Contacts', 'FontSize',18)
rLine=refline(1,0);
rLine.Color='k';
title('DM6 ORNs', 'FontSize',24)

%MANOVA test for significance in difference bewteen mean ipsi and contra
%ORN inputs

concatIpsiCont=[ipsi_OtoP_contacts;contra_OtoP_contacts];
groups=[zeros(size(ipsi_OtoP_contacts,1),1); ones(size(contra_OtoP_contacts,1),1)];


% Ok here I want to generate a histogram of the fraction of ipsi inputs to
% each PN accounted for by each ORN


fractIpsiInputs=[];

for pn=1:5
    
    if ismember( pn, [1,2,5])==1
        
    fractIpsiInputs=[fractIpsiInputs; postPnProfL(:,pn)/sum(postPnProfL(:,pn))];
        
    else
        
    fractIpsiInputs=[fractIpsiInputs; postPnProfR(:,pn)/sum(postPnProfR(:,pn))];
    
    end
    
end

figure()
subplot(2,1,1)
set(gcf, 'color', 'w')
ax=gca;

hist(fractIpsiInputs, 50)
xlabel('Unitary Contact Num/Total Contacts', 'FontSize',18)
ylabel('Freq')
title('Fraction of Ipsi ORN Inputs provided by each ORN', 'FontSize',18)
xlim([0 .08])
ylim([0 12])
stdFractI=['std: ', num2str(std(fractIpsiInputs))];
cvFractI=['CV: ', num2str(std(fractIpsiInputs)/mean(fractIpsiInputs))];
text(.005,11,stdFractI,  'FontSize',18)
text(.005,10,cvFractI, 'FontSize',18)
ax.FontSize=16;

% now I want to run a simulation 

allSimFractIpsi=[];
for r=1:10000
    
    r
    simFractIpsi=[];
    
    for pn=1:5
        
        if ismember(pn, [1,2,5]) == 1
            % assign each ipsilateral ORN contact to one of the ORNs at
            % random
            
            for s=1:sum(postPnProfL(:,pn))
                
                assignment_iPN(s)=randi(length(ORNs_Left));
                
            end
            
            
            %Count the number of output synapses assigned to each L ORN
            
            for o=1:length(ORNs_Left)
                randSumIpPN(o)=numel(find(assignment_iPN==o));
            end
            
            
            clear assignment_iPN
            
        else
            
            for s=1:sum(postPnProfR(:,pn))
                
                assignment_iPN(s)=randi(length(ORNs_Right));
                
            end
            
            
            %Count the number of output synapses assigned to each L ORN
            
            for o=1:length(ORNs_Right)
                
                randSumIpPN(o)=numel(find(assignment_iPN==o));
                
            end
            
            clear assignment_iPN
            
        end
        
        simFractIpsi=[simFractIpsi,randSumIpPN/sum(randSumIpPN)];
        
    end 
    
    stdSimFractIpsi(r)=std(simFractIpsi);
    allSimFractIpsi=[allSimFractIpsi,simFractIpsi];
    
end

%Histogram all simulated fractions

subplot(2,1,2)
ax=gca;

hist(allSimFractIpsi, 50)
xlabel('SIMULATED Unitary Contact Num/Total Contacts', 'FontSize',18)
ylabel('Freq')
title('SIMULATED Fraction of Ipsi ORN Inputs provided by each ORN', 'FontSize',18)
xlim([0 .08])
ylim([0 140000])
stdFractISim=['std: ', num2str(std(allSimFractIpsi))];
cvFractISim=['CV: ', num2str(std(allSimFractIpsi)/mean(allSimFractIpsi))];
text(.005,120000,stdFractISim,  'FontSize',18)
text(.005,100000,cvFractISim, 'FontSize',18)
ax.FontSize=16;



% Histogram the distribution of stds
figure()
set(gcf, 'color', 'w')

hist(stdSimFractIpsi,100)
xlabel('Simulated Distribution Standard Deviations', 'FontSize', 18)
ylabel('Freq', 'FontSize', 18)
% xlim([0 15])
% ylim([0 150])
line([std(fractIpsiInputs) std(fractIpsiInputs)], [0 350], 'color', 'r')  
text(.0095,250, ['Fract sim STDs >= real STD: ', num2str(sum(stdSimFractIpsi>=std(fractIpsiInputs))/r)], 'FontSize',18)
ax=gca;
ax.FontSize=18;
title('Stds of Simulated Distributions', 'FontSize',18)

%% Is the distribution of total number of profiles post-synaptic to ORNs more or less uniform than one generated by randomly assigning synapses to ORNs?

%run the simulation 10000 times

for r=1:5000
   r
    % assign each Left ORN output synapse to one of the 25 Left ORNs at
    % random
    
  for s=1:sum(totPostProfL)
      assignmentL_pp(s)=randi(length(ORNs_Left));
  end
    
      
   % Do the same for Right ORNs
   
  for s=1:sum(totPostProfR)
      assignmentR_pp(s)=randi(length(ORNs_Right));
  end
  
  
  %Count the number of output synapses assigned to each L ORN
  
  for o=1:length(ORNs_Left)
      randSumPostProfL(r,o)=numel(find(assignmentL_pp==o));
  end
  
  %Do the same for R ORNs
  
   for o=1:length(ORNs_Right)
      randSumPostProfR(r,o)=numel(find(assignmentR_pp==o));
   end
  
  
  %Calculate the rand dist std for each reptition
  stdL_pp(r)=std(randSumPostProfL(r,:));
  stdR_pp(r)=std(randSumPostProfR(r,:));
  
  %Calculate the rand dist range for each reptition
  rangeL_pp(r)=range(randSumPostProfL(r,:));
  rangeR_pp(r)=range(randSumPostProfR(r,:));
  
  
end
  
  
  
figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(stdL_pp,75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Left ORNs')
% xlim([0 15])
ylim([0 150])
line([std(totPostProfL) std(totPostProfL)], [0 800], 'color', 'r')  
text(5.5,125, ['Fract rand STDs >= real STD: ', num2str(sum(stdL_pp>=std(totPostProfL))/r)])


subplot(2,2,2)
hist(stdR_pp, 75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Right ORNs')
% xlim([0 15])
ylim([0 150])
line([std(totPostProfR) std(totPostProfR)], [0 800], 'color', 'r')  
text(5.5,125, ['Fract rand STDs >= real STD: ', num2str(sum(stdR_pp>=std(totPostProfR))/r)])
  
  
  
subplot(2,2,3)
hist(rangeL_pp, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
% xlim([10 70])
ylim([0 150])
line([range(totPostProfL) range(totPostProfL)], [0 800], 'color', 'r')  
text(25,125, ['Fract rand ranges >= real range: ', num2str(sum(rangeL_pp>=range(totPostProfL))/r)])


subplot(2,2,4)
hist(rangeR_pp, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
% xlim([10 70])
ylim([0 150])
line([range(totPostProfR) range(totPostProfR)], [0 800], 'color', 'r')  
text(25,125, ['Fract rand ranges >= real range: ', num2str(sum(rangeR_pp>=range(totPostProfR))/r)])


%What if I exclude the smallest ORN from both L and R populations? 
% Not significant


sumLOuts_exMin=sumLeftORNOuts;
sumLOuts_exMin(find(sumLOuts_exMin==min(sumLOuts_exMin)))=[]; 

sumROuts_exMin=sumRightORNOuts;
sumROuts_exMin(find(sumROuts_exMin==min(sumROuts_exMin)))=[]; 

for r=1:10000
   r
    % assign each Left ORN output synapse to one of the 25 Left ORNs at
    % random
    
  for s=1:sum(sumLOuts_exMin)
      assignmentL(s)=randi(length(ORNs_Left)-1);
  end
    
      
   % Do the same for Right ORNs
   
  for s=1:sum(sumROuts_exMin)
      assignmentR(s)=randi(length(ORNs_Right)-1);
  end
  
  
  %Count the number of output synapses assigned to each L ORN
  
  for o=1:length(ORNs_Left)-1
      randSumOutsL(r,o)=numel(find(assignmentL==o));
  end
  
  %Do the same for R ORNs
  
   for o=1:length(ORNs_Right)-1
      randSumOutsR(r,o)=numel(find(assignmentR==o));
   end
  
  
  %Calculate the rand dist std for each reptition
  stdL_exMin(r)=std(randSumOutsL(r,:));
  stdR_exMin(r)=std(randSumOutsR(r,:));
  
  %Calculate the rand dist range for each reptition
  rangeL_exMin(r)=range(randSumOutsL(r,:));
  rangeR_exMin(r)=range(randSumOutsR(r,:));
  
  
end


figure()
set(gcf, 'color', 'w')

subplot(2,2,1)
hist(stdL_exMin,75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Left ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumLOuts_exMin) std(sumLOuts_exMin)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdL_exMin>=std(sumLOuts_exMin))/r)])


subplot(2,2,2)
hist(stdR_exMin, 75)
xlabel('Rand Dist Standard Dev')
ylabel('Freq')
title('Right ORNs')
xlim([0 15])
ylim([0 600])
line([std(sumROuts_exMin) std(sumROuts_exMin)], [0 800], 'color', 'r')  
text(2,550, ['Fract rand STDs >= real STD: ', num2str(sum(stdR_exMin>=std(sumROuts_exMin))/r)])
  
  
  
subplot(2,2,3)
hist(rangeL_exMin, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumLOuts_exMin) range(sumLOuts_exMin)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeL_exMin>=range(sumLOuts_exMin))/r)])


subplot(2,2,4)
hist(rangeR_exMin, 75)
xlabel('Rand Dist Range')
ylabel('Freq')
xlim([10 70])
ylim([0 800])
line([range(sumROuts_exMin) range(sumROuts_exMin)], [0 800], 'color', 'r')  
text(15,750, ['Fract rand ranges >= real range: ', num2str(sum(rangeR_exMin>=range(sumROuts_exMin))/r)])




%%  Hist of number of ORN Input synapses

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);

% Loop over L ORNs
for o=1:length(ORNs_Left)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if ismember(ORNs_Left(o),conns.(cell2mat(connFields(i))).post) == 1


                synCounter=synCounter+1;
                
          
        else
        end
    end
end

sumLeftORNIns(o)=synCounter;

end


% Loop over R ORNs
for o=1:length(ORNs_Right)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1 || isempty(conns.(cell2mat(connFields(i))).post) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if ismember(ORNs_Right(o),conns.(cell2mat(connFields(i))).post) == 1

                synCounter=synCounter+1;
                
          
        else
        end
    end
end

sumRightORNIns(o)=synCounter;

end

figure()
set(gcf, 'color', 'w')

subplot(1,2,1)
hist(sumLeftORNIns, 20)
xlabel('Num Input Synapses')
ylabel('Freq')
title('Left ORNs')
xlim([20 90])
ylim([0 5])
meanInL=['Mean: ', num2str(mean(sumLeftORNIns))];
stdInL=['std: ', num2str(std(sumLeftORNIns))];
cvInL=['CV: ', num2str(std(sumLeftORNIns)/mean(sumLeftORNIns))];
text(25,4.5,meanInL)
text(25,4.25,stdInL)
text(25,4,cvInL)


subplot(1,2,2)
hist(sumRightORNIns, 20)
xlabel('Num Input Synapses')
ylabel('Freq')
title('Right ORNs')
xlim([20 90])
ylim([0 5])
meanInR=['Mean: ', num2str(mean(sumRightORNIns))];
stdInR=['std: ', num2str(std(sumRightORNIns))];
cvInR=['CV: ', num2str(std(sumRightORNIns)/mean(sumRightORNIns))];
text(25,4.5,meanInR)
text(25,4.25,stdInR)
text(25,4,cvInR)

 


%% Is the distribution of ORN--> PN synapse number more or less uniform than one generated by randomly assigning these synapses to ORNs?

%run the simulation 10000 times

for r=1:1000
    r
    %for each PN
    for pn=1:length(PNs)
        
        % assign each Left ORN-->PN synapse to one of the 25 Left ORNs at
        % random
        
        for s=1:sum(sumLeftORN_PN{pn})
            
            assignmentL_o2p(s)=randi(length(ORNs_Left));
            
        end
        
        
        % Do the same for Right ORNs
        
        for s=1:sum(sumRightORN_PN{pn})
            
            assignmentR_o2p(s)=randi(length(ORNs_Right));
            
        end
        
        
        %Count the number of output synapses assigned to each L ORN
        
        for o=1:length(ORNs_Left)
            
            randSumL_OtoP{pn}(r,o)=numel(find(assignmentL_o2p==o));
            
        end
        
        %Do the same for R ORNs
        
        for o=1:length(ORNs_Right)
            randSumR_OtoP{pn}(r,o)=numel(find(assignmentR_o2p==o));
        end
        
        
        %Calculate the rand dist std for each reptition
        stdL_o2p{pn}(r)=std(randSumL_OtoP{pn}(r,:));
        stdR_o2p{pn}(r)=std(randSumR_OtoP{pn}(r,:));
        
        %Calculate the rand dist range for each reptition
        rangeL_o2p{pn}(r)=range(randSumL_OtoP{pn}(r,:));
        rangeR_o2p{pn}(r)=range(randSumR_OtoP{pn}(r,:));
        
    end
    
end

figure()
set(gcf, 'color', 'w')

titles={'PN3 LS', 'PN2 LS', 'PN1 RS', 'PN2 RS', 'PN1 LS'};

for pn=1:5
    
    subplot(2,3,pn)
    hist(stdL_o2p{pn},75)
    xlabel('Rand Dist Standard Dev')
    ylabel('Freq')
    title(titles(pn))
    % xlim([0 15])
    ylim([0 75])
    line([std(sumLeftORN_PN{pn}) std(sumLeftORN_PN{pn})], [0 600], 'color', 'r')
    text(3.5,50, ['Fract rand STDs >= real STD: ', num2str(sum(stdL_o2p{pn}>=std(sumLeftORN_PN{pn}))/r)])
    
end

figure()
set(gcf, 'color', 'w')

for pn=1:5
    
    subplot(2,3,pn)
    hist(stdR_o2p{pn},75)
    xlabel('Rand Dist Standard Dev')
    ylabel('Freq')
    % xlim([0 15])
    ylim([0 75])
    line([std(sumRightORN_PN{pn}) std(sumRightORN_PN{pn})], [0 600], 'color', 'r')
    text(3.5,50, ['Fract rand STDs >= real STD: ', num2str(sum(stdR_o2p{pn}>=std(sumRightORN_PN{pn}))/r)])
     title(titles(pn))
end


% What if I exclude the smallest ORN from the R populations? 
% Then regenerate the histograms for number of ORN--> PN contacts and rerun
% the random assignment analysis


%First I need to regenerate the ORN-PN contact Num dists excluding the
%smallest ORN

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);


lORNs_exMax=ORNs_Left;
lORNs_exMax(find(sumLeftORNOuts==max(sumLeftORNOuts)))=[];

rORNs_exMin=ORNs_Right;
rORNs_exMin(find(sumRightORNOuts==min(sumRightORNOuts)))=[];

%loop over PNs
for pn=1:length(PNs)

% Loop over L ORNs
for o=1:length(lORNs_exMax)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if conns.(cell2mat(connFields(i))).pre == lORNs_exMax(o) && ismember(PNs(pn), conns.(cell2mat(connFields(i))).post) == 1
            numContacts=length(find(conns.(cell2mat(connFields(i))).post == PNs(pn)));

            synCounter=synCounter+numContacts;
            
            
        else
        end
    end
end

sumLeftORN_PN_exMax{pn}(o)=synCounter;

end
    
    
    
% Loop over R ORNs
for o=1:length(rORNs_exMin)
    
synCounter=0;

%loop over all connectors
for i= 1 : length(connFields)
    
    %Make sure the connector doesnt have an empty presynaptic field
    if isempty(conns.(cell2mat(connFields(i))).pre) == 1
        
    else
        
        %Check to see if the working skel is presynaptic at this connector
        if conns.(cell2mat(connFields(i))).pre == rORNs_exMin(o) && ismember(PNs(pn), conns.(cell2mat(connFields(i))).post) == 1
            numContacts=length(find(conns.(cell2mat(connFields(i))).post == PNs(pn)));

            synCounter=synCounter+numContacts;
            
            
        else
        end
    end
end

sumRightORN_PN_exMin{pn}(o)=synCounter;

end


end


for r=1:1000
    r
    %for each PN
    for pn=1:length(PNs)
        
        % assign each right ORN-->PN synapse to one of the 24 (exluding smallest& largest) right and left ORNs at
        % random
       
        for s=1:sum(sumLeftORN_PN_exMax{pn})
            
            assignmentL_o2p_exMax(s)=randi(length(lORNs_exMax));
            
        end
        
        
        for s=1:sum(sumRightORN_PN_exMin{pn})
            
            assignmentR_o2p_exMin(s)=randi(length(rORNs_exMin));
            
        end
        
        
        %Count the number of output synapses assigned to each fictive L & R ORN
        
         for o=1:length(lORNs_exMax)
            randSumL_OtoP_exMax{pn}(r,o)=numel(find(assignmentL_o2p_exMax==o));
        end
        
  
        for o=1:length(rORNs_exMin)
            randSumR_OtoP_exMin{pn}(r,o)=numel(find(assignmentR_o2p_exMin==o));
        end
        
        
        %Calculate the rand dist std for each reptition
    stdL_o2p_exMax{pn}(r)=std(randSumL_OtoP_exMax{pn}(r,:));
        stdR_o2p_exMin{pn}(r)=std(randSumR_OtoP_exMin{pn}(r,:));
        
        %Calculate the rand dist range for each reptition
      rangeL_o2p_exMax{pn}(r)=range(randSumL_OtoP_exMax{pn}(r,:));
        rangeR_o2p_exMin{pn}(r)=range(randSumR_OtoP_exMin{pn}(r,:));
        
    end
    
end

%plot these results

figure()
set(gcf, 'color', 'w')

for pn=1:5
    
    subplot(2,3,pn)
    hist(stdL_o2p_exMax{pn},75)
    xlabel('Rand Dist Standard Dev')
    ylabel('Freq')
    % xlim([0 15])
    ylim([0 75])
    line([std(sumLeftORN_PN_exMax{pn}) std(sumLeftORN_PN_exMax{pn})], [0 600], 'color', 'r')
    text(2.5,50, ['Fract rand STDs >= real STD: ', num2str(sum(stdL_o2p_exMax{pn}>=std(sumLeftORN_PN_exMax{pn}))/r)])
    title(titles(pn))
     
end

figure()
set(gcf, 'color', 'w')

for pn=1:5
    
    subplot(2,3,pn)
    hist(stdR_o2p_exMin{pn},75)
    xlabel('Rand Dist Standard Dev')
    ylabel('Freq')
    % xlim([0 15])
    ylim([0 75])
    line([std(sumRightORN_PN_exMin{pn}) std(sumRightORN_PN_exMin{pn})], [0 600], 'color', 'r')
    text(2.5,50, ['Fract rand STDs >= real STD: ', num2str(sum(stdR_o2p_exMin{pn}>=std(sumRightORN_PN_exMin{pn}))/r)])
    title(titles(pn))
     
end


%% Are the number of ipsi ORN to PN contacts correlated across PNs? I need help here

%reorder the PN contact num array so that it proceeds from L PN1 to 3 and
%then R PN 1 to 2

orderedORNtoPNL(:,1)=postPnProfL(:,5);
orderedORNtoPNL(:,2)=postPnProfL(:,2);
orderedORNtoPNL(:,3)=postPnProfL(:,1);
orderedORNtoPNL(:,4)=postPnProfL(:,3);
orderedORNtoPNL(:,5)=postPnProfL(:,4);

orderedORNtoPNR(:,1)=postPnProfR(:,5);
orderedORNtoPNR(:,2)=postPnProfR(:,2);
orderedORNtoPNR(:,3)=postPnProfR(:,1);
orderedORNtoPNR(:,4)=postPnProfR(:,3);
orderedORNtoPNR(:,5)=postPnProfR(:,4);

% calculate the covariance and correaltion coefficients for this array

covLORNs=cov(orderedORNtoPNL)
covRORNs=cov(orderedORNtoPNR)

ccL=corrcoef(orderedORNtoPNL)
ccR=corrcoef(orderedORNtoPNR)

%Collect left ORN--> left PN contact nums in an array

leftPNs=[1,2,5];
for pn=1:3
    
    ipsiL_OtoP(:,pn)=sumLeftORN_PN{leftPNs(pn)};
end

% Do PCA on this array 

[coeff,score,latent,~,explained] = pca(ipsiL_OtoP)
  
  
%% Here I would like to ask whether ORN output synapses are clustered on the axon
%THIS ISNT GOING WELL, FUTILE?


%For each Left ORN
for o=1:length(ORNs_Left)
o

%Load an ORN Skeleton

workingORN=loadjson(strcat('~/tracing/skeletons/', num2str(ORNs_Left(o)),'.json'));

%loop over all nodes and identify output synapses

connectionFields=fieldnames(workingORN.connectivity);

leftCounter=1;
rightCounter=1;

for i=1:length(connectionFields)
    children=fieldnames(workingORN.connectivity.(cell2mat(connectionFields(i)))); 

   for c=1:length(children)
       
       if strcmp(workingORN.connectivity.(cell2mat(connectionFields(i))).(cell2mat(children(c))).type,'postsynaptic_to') == 1
           
           % Categorize output synapses as left or right based on position
           % relative to the midline
           
           if workingORN.vertices.(cell2mat(connectionFields(i))).x > 430000
               
               leftSynapses(leftCounter)=connectionFields(i);
               leftCounter=leftCounter+1;
               
           else
               
            rightSynapses(rightCounter)=connectionFields(i);
            rightCounter=rightCounter+1;
           end
       else
       end
   end
end

% calculate the path length between all output synapses in the left
% hemisphere

% generate an adjacency matrix indicating skeleton node connectivity for
% our workingORN

    [ edgeMatrix, verts ] = getSkelAdjMat_UW_ORN( workingORN );

for s=1:length(leftSynapses)
    
    curSyn=leftSynapses(s);
    
    %generate a list of all other synapses
    workingSyns=leftSynapses;
    workingSyns(s)=[];
    
    %determine the distance between the current synapse, s, and all other
    %output synapses in this skeleton
    
    
    
%Contact Averaged Path Lengths (CAPLs) calculated and stored
[synToSynAvesL{o}(s), synToSynSTDsL{o}(s), synToSynIndLengthsL{o}{s},synToSynPathsL{o}{s}]=meanPathToIntegrator_undirected(workingORN,edgeMatrix,verts,workingSyns,curSyn);

end


end


pool=[];
for t=1:length(leftSynapses)
    pool=[pool synToSynIndLengthsL{25}{t}];
end
  
  
  
    