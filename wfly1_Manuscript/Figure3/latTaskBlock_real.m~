
%Accept as an arugment L and R ORN spike rates
function [] = latTaskBlock_real(jobNum, reps, dFL, dFR)

%Add my matlab dir to the path 
addpath(genpath('/home/wft2/Matlab'));

%define PN Names
PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};

%Loop over each repetion in this block
for i = jobNum*reps-reps+1:jobNum*reps
    
%Loop over PNs
for p =1:numel(PN_Names)
    
    %working PN
    PN=PN_Names(p);

% move to this PNs lat Task sim dir
%path to the dir containing the hoc files to be run
path1=['/home/wft2/nC_projects/',PN,'_allORNs/simulations/latTask/'];
cd(path1)

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);

%find the spike vector file number each synapse looks to for its
%activity
grepNumCommand=['grep -oP ''spikeVector\K\d*'' ' , hocCpName];
[status, totSynapseNums]=system(grepNumCommand);
totSynapseNums=str2num(totSynapseNums);

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs
ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

% Find synapse ids for all L ORN synapses
activeSynsL=[];
activeSynsL=pullContactNums(ORNs_Left,path1,hocCpName);

% Find synapse ids for all R ORN synapses
activeSynsR=[];
activeSynsR=pullContactNums(ORNs_Right,path1,hocCpName);

% make a spikeVector dir for this sim
svDirName=['spikeVectors_',num2str(i)];
mkSVDirCmd=['mkdir ../../',svDirName];
system(mkSVDirCmd);

% Change the simReference = line in the hoc file and simsDir
simName='latTask';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results/real_LdF',num2str(dFL),'_','RdF',num2str(dFR),'_rep',num2str(i)];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)

%path to the dir containing the spikeVectors that specify this models
%activity
path2=['/home/wft2/nC_projects/',PN,'_allORNs/',svDirName];

%Clear the spike trains/times variables
clear spikeTrain
clear spikeTimes

%generate a spike train that is spon rate for the first 100ms and spont+dF
%for the 2nd 100ms

for o=1:numel(unique(activeSynsL(:,2)))
    
    spikeTrainL(o,:)=[makeSpikes(.001,2.25,.099),makeSpikes(.001,(2.25+dFL),.10)];
    spikeTimesL{o}=find(spikeTrain(o,:)==1);
    
end

%generate a spike train that is spon rate for the first 100ms and spont+dF
%for the 2nd 100ms

for o=1:numel(unique(activeSynsR(:,2)))
    
    spikeTrainR(o,:)=[makeSpikes(.001,2.25,.099),makeSpikes(.001,(2.25+dFR),.10)];
    spikeTimesR{o}=find(spikeTrain(o,:)==1);
    
end

%Save a file for every synapse in the simulation. The files associated
%with the selected ORNs should contain the above generated spike times
%while all other files are blank
saveSpikeVectors_latTask(totSynapseNums,activeSynsL, activeSynsR,spikeTimesL,spikeTimesR,path2)



%add a line to my script that will run this simulation
runCmd=['/groups/htem/code/neuron/nrn/x86_64/bin/nrniv ', hocCpName];
system(runCmd);


system(['rm -rf ',hocCpName])
system(['rm -rf ../../',svDirName])


end

end


end