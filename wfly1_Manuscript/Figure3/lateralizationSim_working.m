%{
plot of percentage of trials where the odor can be correctly lateralized
versus the ipsi-contra ratio in ORN spike numbers (in each run of the simulation,
 randomly assign a single spike to some subset of the ORNs in each antenna
[we may want to jitter the timing of the ORN spikes a bit to promote PN summation];
then “decide” which antenna witnessed the larger number of stimulus-evoked
 spikes based on whether the right or left PNs had the larger time-and-cell-averaged
 membrane potential change; score the decision as correct or not; run the simulation
until the percentage of trials that are correct converges to a stable value that
 depends on the ipsi-contra ratio, for a range of such ratios); perform this
for a case where the number of recruited ORNs is high (e.g., 25 of the 51 ORNs
fire a spike; here performance should be perfect even when the ipsi-contra ratio is just above 1)
 and also a case where the number of recruited ORNs is low (e.g., 5 of the 51 ORNs fire a spike;
 here performance should be imperfect even when the ipsi-contra ratio is
 4:1 or 5:0, due to the fact that not every ORN has a strong ipsi-contra bias in its synapses)
 
(1) choose a number (n) of left and right ORNs to activate. What about from
3:50?

(2) loop over situations where the number of left ORNs recruited runs from
1 to n/2 while the number of right ORNs recruited runs from n/2 to 1

(3) Randomly select the ORNs that will be activated and put a single spike
in each

(4) Simulate PN responses to this stimulus in all PNs

(5) measure the mean PN response in L and R PN pools and record which pool
responded more strongly



%}


%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
%
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing
% ORNs_Left(find(ORNs_Left == 593865))=[];

ORNs=[ORNs_Left, ORNs_Right];


%% File handling

% I want to make a copy of each nC_projects PN directory

PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};

for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs directory within the nC_Projects dir
    % Path structure for my Ubuntu machine
    cd('/home/william/nC_projects/');
    
    % First things first, I need to make a copy of the current generatedNEURON
    % directory. This is where we will be working
    
    copyFileCommand = ['cp -R ', PN, ' ',[PN,'_latSim']];
    
    system(copyFileCommand);
    
    mkdir(['./',[PN,'_latSim/spikeVectors']]);
    
end

% I want to run Wei's script to copy/compile VecEvent.mod in each
% PN_latSim/generatedNEURON dir. Also run hocEdsv_WTMod.py on each PN.hoc
% file


for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs latSim/generatedNEURON dir
    cd(['/home/william/nC_projects/',PN,'_latSim/generatedNEURON']);
    
    % copy vecEvent.mod to the cur dir and compile it
    vecEventcmd='bash ../../copy_comp.sh';
    system(vecEventcmd);
    
    %run hocEdsv_WTMod.py on the PN.hoc file in the cur dir. NOTE: What is
    %needed here is a modified hocED file that allows definition of the
    %path to spikeVectors dir and simRef
    
    hocModcmd=['python ../../hocEdsv2.py ', PN ,'.hoc ', PN, '_latSim'];
    system(hocModcmd)
    
    % Change the simReference = line in the hoc file and simsDir
    simName='latSim';
    simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',PN, '.hoc '];
    system(simRefCmd)
    
    simDir=['/home/william/nC_projects/',PN,'_latSim/simulations/'];
    simRefCmd=['sed -i -e ''s#simsDir\s\=\s\".*\"#simsDir \= \"',simDir,'\"#'' ',PN, '.hoc '];
    system(simRefCmd)
    
    %Set simulation duration
    runTime=300; %in ms
    runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN, '.hoc '];
    system(runTCmd)
    
    % Copy the contents of the generated NEURON folder into the latSim dir
    mkdir(['/home/william/nC_projects/',PN,'_latSim/simulations/latSim']);
    cpCmd=['cp -a /home/william/nC_projects/',PN,'_latSim/generatedNEURON/. /home/william/nC_projects/',PN,'_latSim/simulations/latSim/'];
    system(cpCmd);
    
end



%% Run the simulations, collect the results


ornNumCounter=1;

% loop over different numbers of activated ORNs
for n=25
    
    % loop over different numbers of activated IPSI ORNs
    
    for nLeft=1:n-1
        
        % Run the simulation X times at each fraction L
        
        for reps=1:20
            tic
            %Randomly select nLeft left ORN and and n-nLeft right ORNs
            
            selectionL=randsample(length(ORNs_Left),nLeft);
            skelIDsL=ORNs_Left(selectionL);
            
            selectionR=randsample(length(ORNs_Right),n-nLeft);
            skelIDsR=ORNs_Right(selectionR);
            
            for p=1:length(PN_Names)
                
                PN=PN_Names{p};
                
                
                cd(['/home/william/nC_projects/', PN,'_latSim/simulations/latSim/'])
                
                % pull the synapse #s associated with these ORNs from the hoc file
                
                activeSyns=[];
                
                
                %For the left ORNs
                
                for lo=1:length(skelIDsL)
                    
                    grepCommand=['grep -oP ''', num2str(skelIDsL(lo)),'\[\d*\].ropen\("/home/william/nC_projects/',PN,'_latSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
                    %         [status, synapseNumsL{lo}]=system(grepCommand);
                    %         synapseNumsL{lo}=unique(str2num(synapseNumsL{lo}));
                    
                    [status, synsW]=system(grepCommand);
                    activeSyns=[activeSyns; str2num(synsW)];
                    synsW=[];
                    
                end
                
                
                % For right ORNs
                
                for ro=1:length(skelIDsR)
                    
                    grepCommand=['grep -oP ''', num2str(skelIDsR(ro)),'\[\d*\].ropen\("/home/william/nC_projects/',PN,'_latSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
                    %         [status, synapseNumsR{ro}]=system(grepCommand);
                    %         synapseNumsR{ro}=unique(str2num(synapseNumsR{ro}));
                    [status, synsW]=system(grepCommand);
                    activeSyns=[activeSyns; str2num(synsW)];
                    synsW=[];
                    
                end
                
                
                
               
                %find the total number of synapses
                grepCommand=['grep -oP ''\[\d*\].ropen\("/home/william/nC_projects/',PN,'_latSim/spikeVectors/spikeVector\K\d*'' ' , PN,'.hoc'];
                [status, totSynapseNums]=system(grepCommand);
                totSynapseNums=str2num(totSynapseNums);
                
               % Save spike vector files for all synapses on this PN with a single
               % spike at the synapses from selected ORNs
                
                for f=1:numel(totSynapseNums)
                    
                    s=totSynapseNums(f);
                    
                    if ismember(s,activeSyns)
                        
                        vector=100; %spike time
                        save(['~/nC_projects/',PN,'_latSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                        
                    else
                        
                        vector=[];
                        save(['~/nC_projects/',PN,'_latSim/spikeVectors/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
                    end
                end
                
                
%                 % make files for writing results to
%                 getFnCmd=['grep -o ''neuron_.*\.dat'' ',PN,'.hoc'];
%                 [status, Fn]=system(getFnCmd);
%                 Fn=strrep(Fn,'%d','0');
%                 dummy=[];
%                 save(Fn,'dummy','-ascii')
                
                %Run the simulation
       
                runCmd=['nrniv ', PN, '.hoc'];
                system(runCmd)
                
                
                
                %Load the resulting PN membrane pot and store it
                
                %find its name
                pnResults=dir('neuron_PN*.dat');
                pnVm(reps,p,:)=importdata(pnResults.name);
                
            end
           
            
            toc
            
        end 
        
            % compare R and L PN responses and determine which is larger, store the
            % outcome. winner will equal zero for left larger 1 for right
            % larger
            
    end
    
    ornNumCounter=ornNumCounter+1;

end