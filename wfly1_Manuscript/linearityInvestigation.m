% 
% function [] = linearityInvestigationBlock_eq( jobNum, reps, dF, PN)

%define some needed variables
i=1;
dF=0;
PN='PN1RS';

%Add my matlab dir to the path 
addpath(genpath('/home/simulation/Documents/MATLAB'));



%path to the dir containing the hoc files to be run
path1=['/home/simulation/nC_projects/',PN,'_allORNs/simulations/linearityInvestigation/'];
%make the folder
makeResultDir=['mkdir ',path1];
system(makeResultDir)

%Move to the PN project directory
cd(['~/nC_projects/',PN,'_allORNs/'])


%Copy the contents of the generatedNEURON dir to linearityInvestigation
system('cp -a generatedNEURON/. simulations/linearityInvestigation/')

%move to linearityInvestigation
cd('simulations/linearityInvestigation')

%copy vecEvent.mod to this Dir
system('cp /home/simulation/neuron/nrn/share/examples/nrniv/netcon/vecevent.mod ./')

%Compile mod files in this Dir
system('nrnivmodl')

%run hocEdsv2 on the hoc file
hocEdCmd=['python ../../../hocEdsv2.py ',PN,'_allORNs.hoc ', PN,'_allORNs'];
system(hocEdCmd)

%replace /home/william paths to /home/simulation
system(['sed -i -e ''s#\/home\/william\/#\/home\/simulation\/#'' ', PN,'_allORNs.hoc'])

%Set initial Vm
initVm=-59.4; %in mv
runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ', PN,'_allORNs.hoc'];
system(runVCmd)

%Setsim duration
runTime=10050; %in ms
runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN,'_allORNs.hoc'];
system(runTCmd)

%make a copy of the hoc file
hocCpName=[PN, '_', num2str(i) , '_CP.hoc ' ];
cpCmd=['cp ',PN, '_allORNs.hoc ',hocCpName ];
system(cpCmd);


%find the spike Vector file Number each synapse looks to for its
%activity
grepNumCommand=['grep -oP ''spikeVector\K\d*'' ' , hocCpName];
[status, totSynapseNums]=system(grepNumCommand);
totSynapseNums=str2num(totSynapseNums);

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

%Load ipsi ORN skel IDs
if strcmp(PN, 'PN1RS') ==1  || strcmp(PN, 'PN2RS') ==1
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Right_0x20_ORN;
else
    % Return all skeleton IDs for R and L ORNs
    ipsiORNs=annotations.Left_0x20_ORN;
end

% Find synapse ids for all ipsi ORN synapses, shuffle them and pull 100 for
% my test

activeSyns=[];
activeSyns=pullContactNums(ipsiORNs,path1,hocCpName);
% activeSyns=activeSyns(randperm(size(activeSyns,1),size(activeSyns,1)),:);
% activeSyns=activeSyns(:,1);

% make a spikeVector dir for this sim
svDirName=['spikeVectors_',num2str(i)];
mkSVDirCmd=['mkdir ../../',svDirName];
system(mkSVDirCmd);

% Change the simReference = line in the hoc file and simsDir
simName='linearityInvestigation';
simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',hocCpName];
system(simRefCmd)

% Change the hoc file code to look to this spikeVector dir
chngSVDirCmd=['sed -i -e ''s#spikeVectors#',svDirName,'#'' ',hocCpName];
system(chngSVDirCmd)

%Set the name of the directory to which the results will be saved
resultDir=['results_linearityTest/seq'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)

%path to the dir containing the spikeVectors that specify this models
%activity
path2=['/home/simulation/nC_projects/',PN,'_allORNs/',svDirName];

% save a spike vector file for each synapse on this dendrite, sequentially
% firing each of the activeSyns

spikes=[200:200:(200*26)];

for f=1:numel(totSynapseNums)
    
    s=totSynapseNums(f);
    
    if ismember(s,activeSyns(:,1))
                    
            vector=spikes(activeSyns(find(activeSyns(:,1) == s),2));
            save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
            
      
        
    else
        
        vector=[];
        save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
        
    end
end


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);

%import result vector
sequence2=importdata([resultDir,'/neuron_PN1_RS_sk_638603_0.dat']);
plot(sequence2+59.4)
grandSum(2)=sum(sequence2+59.4);

%Set the name of the directory to which the results will be saved
resultDir=['results_linearityTest/sim'];
mkdir(resultDir)
chngResDir=['sed -i -e ''s#{ sprint(targetDir, "%s%s/", simsDir, simReference)}#targetDir="',path1,resultDir,'/"#'' ',hocCpName];
system(chngResDir)



for f=1:numel(totSynapseNums)
    
    s=totSynapseNums(f);
    
    if ismember(s,activeSyns(:,1))
                    
            vector=10;
            save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
            
      
        
    else
        
        vector=[];
        save([path2,'/spikeVector',num2str(totSynapseNums(f)),'.txt'],'vector','-ascii')
        
    end
end


%add a line to my script that will run this simulation
runCmd=['nrniv ', hocCpName];
system(runCmd);

%import result vector
simultaneous2=importdata([resultDir,'/neuron_PN1_RS_sk_638603_0.dat']);
plot(simultaneous2+59.4)
simulSum(2)=sum(simultaneous2+59.4);

    
    
    
