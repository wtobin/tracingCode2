//  ******************************************************
// 
//     File generated by: neuroConstruct v1.6.0
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /home/william/nC_projects/PN1LS/PN1LS.ncx "
print ""
print "    Description: neuroConstruct project generated from contents of file: /home/william/ORN_to_PN_NeuroML/allORNsToPN1LS.neuroml"
print "    "
print "    The cell positions & network connections in memory reflect the instances in the NetworkML elements of the imported file. Regenerating the network in neuroConstruct nmay lead to a different network structure."
print ""
print "    Simulation Configuration: SimConfig: Default Simulation Configuration "
print "    This is the default configuration of the Cell Groups, stimulations, plots, etc for this project "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(852094659)}

//////////////////////////////////////////////////////////////////////
//   Cell group 0: neuron_PN1_LS_sk_419138 has cells of type: neuron_PN1_LS_sk_419138
//////////////////////////////////////////////////////////////////////


//  Adding cell template file: neuron_PN1_LS_sk_419138.hoc for cell group neuron_PN1_LS_sk_419138

{ load_file("neuron_PN1_LS_sk_419138.hoc") }

//  Adding 1 cells of type neuron_PN1_LS_sk_419138 in region neuron_PN1_LS_sk_419138_region

{n_neuron_PN1_LS_sk_419138 = 1}

{n_neuron_PN1_LS_sk_419138_local = 0 } // actual number created on this host

objectvar a_neuron_PN1_LS_sk_419138[n_neuron_PN1_LS_sk_419138]

proc addCell_neuron_PN1_LS_sk_419138() {
    strdef reference
    sprint(reference, "neuron_PN1_LS_sk_419138_%d", $1)
    a_neuron_PN1_LS_sk_419138[$1] = new neuron_PN1_LS_sk_419138(reference, "neuron_PN1_LS_sk_419138", "")
    allCells.append(a_neuron_PN1_LS_sk_419138[$1])
}

for i = 0, n_neuron_PN1_LS_sk_419138-1 {
    addCell_neuron_PN1_LS_sk_419138(i)
    n_neuron_PN1_LS_sk_419138_local = n_neuron_PN1_LS_sk_419138_local +1 

}


//  Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (100.0, 100.0, 100.0)


//  Packing has been generated by: Single cell: (0.0, 0.0, 0.0) (absolute position)

{a_neuron_PN1_LS_sk_419138[0].position(0.0,0.0,0.0)}


//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 6.3}



proc initialiseValues0() {


//  Setting initial vals in cell group: neuron_PN1_LS_sk_419138 which has 1 cells


//  Giving all cells an initial potential of: -65.0

    for i = 0, n_neuron_PN1_LS_sk_419138-1 {
        forsec a_neuron_PN1_LS_sk_419138[i].all  v = -65.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}


