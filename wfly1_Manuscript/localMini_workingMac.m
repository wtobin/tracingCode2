%% This script is written to record each simulated mEPSP at the site of the synapse

% 1. Loop over each contact

% 2. modify the .hoc file to put the recording electrode at the synapse

% 3. save spike vector files causing only that synapse to fire once

% 4. run the simulation

% 5. load the result and save it



%% Step 0 load annotations

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

%exclude unilateral ORNs for now

ORNs_Right(find(ORNs_Right == 499879))=[];
ORNs_Left(find(ORNs_Left == 426230))=[];
ORNs_Left(find(ORNs_Left == 401378))=[];
%
% %exclude ORN 8 because it was temporarily unilateral on 8/5 for testing
% ORNs_Left(find(ORNs_Left == 593865))=[];

ORNs=[ORNs_Left, ORNs_Right];



PN_Names={'PN1LS','PN2LS', 'PN3LS', 'PN1RS', 'PN2RS'};

%% Step 1 File handling


% make a copy of the original generatedNEURON directory and call it
% localMini

for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs directory within the nC_Projects dir
    % Path structure for my Ubuntu machine
    cd('/home/william/nC_projects/');
    
    % First things first, I need to make a copy of the current generatedNEURON
    % directory. This is where we will be working
    
    copyFileCommand = ['cp -R ', [PN, '_151125'], ' ',[PN,'_localMini']];
    
    system(copyFileCommand);
    
    mkdir(['./',[PN,'_localMini/spikeVectors']]);
  
end

% I want to run Wei's script to copy/compile VecEvent.mod in each
% PN_localMini/generatedNEURON dir. Also run hocEdsv_WTMod.py on each PN.hoc
% file


for p=1:length(PN_Names)
    
    PN=PN_Names{p};
    
    % Move to the current PNs localMini/generatedNEURON dir
    cd(['/home/william/nC_projects/',PN,'_localMini/generatedNEURON']);
    
    % copy vecEvent.mod to the cur dir and compile it
    vecEventcmd='bash ../../copy_comp.sh';
    system(vecEventcmd);
    
    %run hocEdsv.py on the PN_151125.hocfile in the cur dir. 
    
    hocModcmd=['python ../../hocEdsv2.py ', PN ,'_151125.hoc ', PN, '_localMini'];
    system(hocModcmd)
    
    %This code fragment is for use on the simulation machine only, it
    %changes paths in hoc file from /william/ to /simulation/
       % Change the simReference = line in the hoc file and simsDir
    simPatCmd=['sed -i -e ''s/\/home\/simulation\//\/home\/william\//'' ',PN, '_151125.hoc'];
    system(simPatCmd)
    
    % Change the simReference = line in the hoc file and simsDir
    simName='localMini';
    simRefCmd=['sed -i -e ''s/simReference\s\=\s\".*\"/simReference \= \"',simName,'\"/'' ',PN, '_151125.hoc'];
    system(simRefCmd)
    
    simDir=['/home/william/nC_projects/',PN,'_localMini/simulations/'];
    simRefCmd=['sed -i -e ''s#simsDir\s\=\s\".*\"#simsDir \= \"',simDir,'\"#'' ',PN, '_151125.hoc'];
    system(simRefCmd)
    
    %Set initial Vm
    initVm=-59.4; %in mv
    runVCmd=['sed -i -e ''s#v\s\=\s\-65\.\0#v = \',num2str(initVm),'#'' ',PN, '_151125.hoc'];
    system(runVCmd)
    
    
     %Setsim duration
    runTime=100; %in ms
    runTCmd=['sed -i -e ''s#tstop\s\=\s.*#tstop \= ',num2str(runTime),'#'' ',PN, '_151125.hoc'];
    system(runTCmd)
    
    % Copy the contents of the generated NEURON folder into the localMini dir
    mkdir(['/home/william/nC_projects/',PN,'_localMini/simulations/localMini']);
    cpCmd=['cp -a /home/william/nC_projects/',PN,'_localMini/generatedNEURON/. /home/william/nC_projects/',PN,'_localMini/simulations/localMini/'];
    system(cpCmd);
    
end

%% Loop over each contact in each PN

for p=1:length(PN_Names)
    
    
    PN=PN_Names{p};
    
    % Move to the current PNs localMini/generatedNEURON dir
    cd(['/home/william/nC_projects/',PN,'_localMini/simulations/localMini/']);
    
      %make a backup copy of the hoc file
    
    bkCmd=['cp ', PN,'_151125.hoc ', PN,'_151125.hoc.bak2'];
    system(bkCmd);
    
    %Identify the PN skeleton ID
    skelIDCmd=['grep -o -P ''\&a_neuron_PN\d_\SS_sk_\K\d*'' ',PN, '_151125.hoc' ];
    [status, workingSkelID ]=system(skelIDCmd);
    
    %find the vector file number each contact looks to for its activity
    vecFileCmd=['grep -oP ''\[\d*\].ropen\("/home/william/nC_projects/',PN,'_localMini/spikeVectors/spikeVector\K\d*'' ' , PN,'_151125.hoc'];
    [status, vecFileNums]=system(vecFileCmd);
    vecFileNums=str2num(vecFileNums);
    
    
    % find each contacts compartment
    compNumCmd=['grep -oP ''access a_neuron_PN.*\[\d*\]\.c\K\d*'' ' , PN,'_151125.hoc'];
    [status, compartNums]=system(compNumCmd);
    compartNums=str2num(compartNums);
    
    % find each contacts position within the compartment
    compPosCmd=['grep -oP ''new DoubExpSynA\(0.\K\d*'' ' , PN,'_151125.hoc'];
    [status, compartPos]=system(compPosCmd);
    compartPos=str2num(compartPos);
    
    % make sure all of these vectors have the same number of elements.
    % System calls in matlab have a bug whereby the output is often
    % truncated
    
    while numel(vecFileNums) ~= numel(compartNums) || numel(vecFileNums) ~= numel(compartPos) || numel(compartNums) ~= numel(compartPos)
        
        clear compartPos vecFileNums compartNums
        
        [status, vecFileNums]=system(vecFileCmd);
        vecFileNums=str2num(vecFileNums);
        
        [status, compartNums]=system(compNumCmd);
        compartNums=str2num(compartNums);

        [status, compartPos]=system(compPosCmd);
        compartPos=str2num(compartPos);
        
        
    end
    
    

    for s=1:numel(vecFileNums)
        tic
        %restore original file
        restoreCmd=['cp -f ',PN, '_151125.hoc.bak2 ', PN, '_151125.hoc'];
        system(restoreCmd);
        
        % move my simulated electrode to the site of the working contact
        
        mvElecCmd=['sed -i ''s#\&a_neuron_PN.*_.*S_sk_.*\[i\]\.c.*\.v[(]0\..*[)]#\&a_neuron_',...
            PN(1:3),'_',PN(4:5),'_sk_',num2str(workingSkelID(1:6)),'[i].c',...
            num2str(compartNums(s)),'.i_cap(0.',num2str(compartPos(s)),'))#'' ' ,PN, '_151125.hoc' ];
        
        system(mvElecCmd);
        
        % plot voltage for this pos as well
        
        chngPlotCmd1=['sed -i ''s#\.c2\.v[(]0\.5[)]#\.c',...
            num2str(compartNums(s)),'.v(0.',num2str(compartPos(s)),')#'' ' ,PN, '_151125.hoc' ];
        
        system(chngPlotCmd1);
        
        chngPlotCmd2=['sed -i ''s#\.c2\.v#\.c',...
            num2str(compartNums(s)),'.v#'' ' ,PN, '_151125.hoc' ];
        
        system(chngPlotCmd2);
        
        
        %save spike vector files which are empty for all but the active
        %contact and put a single spike in that file at 10ms
        
        saveSpikeVectors(vecFileNums,[vecFileNums(s) 1],{10},['/home/william/nC_projects/',PN,'_localMini/spikeVectors']);
        
        
         
            %I want to run the simulation
            
            runCmd=['nrniv ', PN, '_151125.hoc'];
            system(runCmd);
            
            
            %I want to import the PNs simulated voltage trace
            
            
            %find its name
            pnResults=dir('neuron_PN*.dat');
            
            pnVm1=importdata(pnResults.name);
            
            localMinis{p}(s,:)=pnVm1;
            
       toc 
    end
    
    
end

%% some plotting

for p=1:5
    
    for a=1:size(localMinis{p},1)
        
        miniAmps{p}(a)=max(localMinis{p}(a,:))-mean(localMinis{p}(a,1:399));
        
    end
    
  
end

figure()
set(gcf, 'Color', 'w')

for i=1:5
    subplot(5,1,i)
%     scatter(i*ones(1,numel(miniAmps{i})),miniAmps{i})
%     
%     hold on

hist(miniAmps{i},100)
xlim([0 10])
title(PN_Names(i),'FontSize',12)

if i==5
    
    xlabel('local mini amp (mv)','FontSize',16)
    ylabel('Freq','FontSize',16)
    
else
end

end

